// Generated by purs version 0.13.5
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Egg_Data_TileSet = require("../Egg.Data.TileSet/index.js");
var Egg_Logic_Board = require("../Egg.Logic.Board/index.js");
var Egg_Logic_Movement = require("../Egg.Logic.Movement/index.js");
var Egg_Types_Clockwise = require("../Egg.Types.Clockwise/index.js");
var Egg_Types_Coord = require("../Egg.Types.Coord/index.js");
var Egg_Types_RenderAngle = require("../Egg.Types.RenderAngle/index.js");
var Matrix = require("../Matrix/index.js");
var translateRotation = function (size) {
    return function (v) {
        return function (clockwise) {
            var width = size.width - 1 | 0;
            var right = Egg_Types_Coord.Coord({
                x: width - v.y | 0,
                y: v.x,
                offsetX: v.offsetX,
                offsetY: v.offsetY
            });
            var height = size.height - 1 | 0;
            var left = Egg_Types_Coord.Coord({
                x: v.y,
                y: height - v.x | 0,
                offsetX: v.offsetX,
                offsetY: v.offsetY
            });
            if (clockwise instanceof Egg_Types_Clockwise.Clockwise) {
                return right;
            };
            if (clockwise instanceof Egg_Types_Clockwise.AntiClockwise) {
                return left;
            };
            throw new Error("Failed pattern match at Egg.Logic.Map (line 24, column 5 - line 26, column 28): " + [ clockwise.constructor.name ]);
        };
    };
};
var updateRenderItem = function (size) {
    return function (clockwise) {
        return function (v) {
            var v1 = translateRotation(size)(Egg_Types_Coord.createCoord(v.x)(v.y))(clockwise);
            return {
                x: v1.x,
                y: v1.y,
                value: v.value
            };
        };
    };
};
var switchTile = function (oldId) {
    return function (newId) {
        return function (tile) {
            var change = function (from) {
                return function (to) {
                    return function (tile$prime) {
                        var $21 = tile.id === from;
                        if ($21) {
                            return Data_Maybe.fromMaybe(tile$prime)(Data_Map_Internal.lookup(Data_Ord.ordInt)(to)(Egg_Data_TileSet.tiles));
                        };
                        return tile$prime;
                    };
                };
            };
            return change(oldId)(newId)(change(newId)(oldId)(tile));
        };
    };
};
var switchTiles = function (oldId) {
    return function (newId) {
        return function (board) {
            return Data_Functor.map(Matrix.functorMatrix)(switchTile(oldId)(newId))(board);
        };
    };
};
var rotateOffset = function (v) {
    return function (v1) {
        if (v instanceof Egg_Types_Clockwise.Clockwise) {
            return Egg_Types_Coord.createFullCoord(0)(0)((-1 | 0) * v1.offsetY | 0)(v1.offsetX);
        };
        if (v instanceof Egg_Types_Clockwise.AntiClockwise) {
            return Egg_Types_Coord.createFullCoord(0)(0)(v1.offsetY)((-1 | 0) * v1.offsetX | 0);
        };
        throw new Error("Failed pattern match at Egg.Logic.Map (line 107, column 1 - line 107, column 44): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var getNewPlayerDirection = function (coord) {
    return function (clockwise) {
        var newCoord = (function () {
            if (clockwise instanceof Egg_Types_Clockwise.Clockwise) {
                return Egg_Types_Coord.createCoord(1)(0);
            };
            if (clockwise instanceof Egg_Types_Clockwise.AntiClockwise) {
                return Egg_Types_Coord.createCoord(-1 | 0)(0);
            };
            throw new Error("Failed pattern match at Egg.Logic.Map (line 50, column 9 - line 52, column 46): " + [ clockwise.constructor.name ]);
        })();
        var $25 = Egg_Logic_Movement.isStationary(coord);
        if ($25) {
            return newCoord;
        };
        return coord;
    };
};
var rotatePlayer = function (size) {
    return function (clockwise) {
        return function (player) {
            var newCoords = Egg_Types_Coord.center(translateRotation(size)(player.coords)(clockwise));
            var direction = getNewPlayerDirection(player.direction)(clockwise);
            return {
                coords: newCoords,
                direction: direction,
                oldDirection: player.oldDirection,
                currentFrame: player.currentFrame,
                id: player.id,
                falling: player.falling,
                stop: player.stop,
                lastAction: player.lastAction,
                moved: player.moved,
                playerType: player.playerType
            };
        };
    };
};
var findArrayItem = function (v) {
    return function (items) {
        var foundItem = Data_Array.head(Data_Array.filter(function (item) {
            return item.x === v.x && item.y === v.y;
        })(items));
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
            return v1.value;
        })(foundItem);
    };
};
var rotateBoard = function (clockwise) {
    return function (board) {
        var size = Egg_Logic_Board.boardSizeFromBoard(board);
        var items = Data_Functor.map(Data_Functor.functorArray)(updateRenderItem(size)(clockwise))(Matrix.toIndexedArray(board));
        var mapItem = function (x) {
            return function (y) {
                return function (a) {
                    return Data_Maybe.fromMaybe(a)(findArrayItem(Egg_Types_Coord.createCoord(x)(y))(items));
                };
            };
        };
        return Matrix.indexedMap(mapItem)(board);
    };
};
var changeRenderAngle = function (angle) {
    return function (clockwise) {
        if (clockwise instanceof Egg_Types_Clockwise.Clockwise) {
            return Egg_Types_RenderAngle.increase(angle)(90);
        };
        if (clockwise instanceof Egg_Types_Clockwise.AntiClockwise) {
            return Egg_Types_RenderAngle.decrease(angle)(90);
        };
        throw new Error("Failed pattern match at Egg.Logic.Map (line 94, column 5 - line 96, column 55): " + [ clockwise.constructor.name ]);
    };
};
module.exports = {
    translateRotation: translateRotation,
    getNewPlayerDirection: getNewPlayerDirection,
    rotateBoard: rotateBoard,
    findArrayItem: findArrayItem,
    updateRenderItem: updateRenderItem,
    changeRenderAngle: changeRenderAngle,
    rotatePlayer: rotatePlayer,
    rotateOffset: rotateOffset,
    switchTiles: switchTiles,
    switchTile: switchTile
};
