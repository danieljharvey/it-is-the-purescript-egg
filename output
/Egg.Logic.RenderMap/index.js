// Generated by purs version 0.13.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Egg_Logic_Board = require("../Egg.Logic.Board/index.js");
var Egg_Types_Coord = require("../Egg.Types.Coord/index.js");
var Egg_Types_PlayerType = require("../Egg.Types.PlayerType/index.js");
var Egg_Types_RenderAngle = require("../Egg.Types.RenderAngle/index.js");
var Egg_Types_ResourceUrl = require("../Egg.Types.ResourceUrl/index.js");
var Egg_Types_Tile = require("../Egg.Types.Tile/index.js");
var Egg_Types_TileAction = require("../Egg.Types.TileAction/index.js");
var Matrix = require("../Matrix/index.js");
var shouldDraw = function (map) {
    return function (v) {
        var draw = Matrix.get(v.x)(v.y)(map);
        return Data_Maybe.fromMaybe(false)(draw);
    };
};
var shouldDrawItem = function (map) {
    return function (item) {
        return shouldDraw(map)(Egg_Types_Coord.createCoord(item.x)(item.y)) && item.value.drawMe;
    };
};
var needsFullRefresh = function (old) {
    return function ($$new) {
        return Data_Eq.notEq(Egg_Types_RenderAngle.eqRenderAngle)(old.rotateAngle)($$new.rotateAngle) || old.turns === 0;
    };
};
var getRenderList = function (rMap) {
    var filtered = Data_Array.filter(function (item) {
        return item.value === true;
    })(Matrix.toIndexedArray(rMap));
    return Data_Functor.map(Data_Functor.functorArray)(function (item) {
        return Egg_Types_Coord.createCoord(item.x)(item.y);
    })(filtered);
};
var getPlayerCoordList = function (map) {
    return function (player) {
        var maxY = Matrix.height(map);
        var maxX = Matrix.width(map);
        return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(player.coords.x - 1 | 0)(player.coords.x + 1 | 0))(function (v) {
            return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(player.coords.y - 1 | 0)(player.coords.y + 1 | 0))(function (v1) {
                return Control_Applicative.pure(Control_Applicative.applicativeArray)(Egg_Types_Coord.createCoord(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v)(maxX))(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v1)(maxY)));
            });
        });
    };
};
var fillWholeBoard = function (value) {
    return function (board) {
        return Matrix.repeat(Matrix.width(board))(Matrix.height(board))(value);
    };
};
var buildRenderArray = function (map) {
    return function (board) {
        var filterFunc = function (item) {
            return shouldDraw(map)(Egg_Types_Coord.createCoord(item.x)(item.y));
        };
        var array = Matrix.toIndexedArray(board);
        return Data_Array.filter(filterFunc)(array);
    };
};
var blankRenderMap = fillWholeBoard(false);
var createRenderMap = function (before) {
    return function (after) {
        var compare = function (a) {
            return function (b) {
                return Data_Eq.notEq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                    return "title";
                }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                    return "img";
                }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                    return "id";
                }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                    return "frontLayer";
                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                    return "drawMe";
                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                    return "dontAdd";
                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                    return "createPlayer";
                }))(Data_Maybe.eqMaybe(Egg_Types_PlayerType.eqPlayerKind)))()(new Data_Symbol.IsSymbol(function () {
                    return "breakable";
                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                    return "background";
                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                    return "action";
                }))(Egg_Types_TileAction.eqTileAction)))(a)(b);
            };
        };
        var renderMap = Matrix.zipWith(compare)(before)(after);
        var blankMap = blankRenderMap(before);
        return Data_Maybe.fromMaybe(blankMap)(renderMap);
    };
};
var addPlayers = function (size) {
    return function (player) {
        var width = size.width - 1 | 0;
        var right = (function () {
            var $13 = Egg_Types_Coord.totalX(player.coords) > (width * Egg_Types_Tile.tileSize | 0);
            if ($13) {
                return [ {
                    coords: Data_Semigroup.append(Egg_Types_Coord.semigroupCoord)(player.coords)(Egg_Types_Coord.invert(Egg_Types_Coord.createCoord(width + 1 | 0)(0))),
                    currentFrame: player.currentFrame,
                    direction: player.direction,
                    falling: player.falling,
                    id: player.id,
                    lastAction: player.lastAction,
                    moved: player.moved,
                    oldDirection: player.oldDirection,
                    playerType: player.playerType,
                    stop: player.stop
                } ];
            };
            return Data_Monoid.mempty(Data_Monoid.monoidArray);
        })();
        var left = (function () {
            var $14 = Egg_Types_Coord.totalX(player.coords) < 0;
            if ($14) {
                return [ {
                    coords: Data_Semigroup.append(Egg_Types_Coord.semigroupCoord)(player.coords)(Egg_Types_Coord.createCoord(width + 1 | 0)(0)),
                    currentFrame: player.currentFrame,
                    direction: player.direction,
                    falling: player.falling,
                    id: player.id,
                    lastAction: player.lastAction,
                    moved: player.moved,
                    oldDirection: player.oldDirection,
                    playerType: player.playerType,
                    stop: player.stop
                } ];
            };
            return Data_Monoid.mempty(Data_Monoid.monoidArray);
        })();
        var height = size.height - 1 | 0;
        var top = (function () {
            var $15 = Egg_Types_Coord.totalY(player.coords) < 0;
            if ($15) {
                return [ {
                    coords: Data_Semigroup.append(Egg_Types_Coord.semigroupCoord)(player.coords)(Egg_Types_Coord.createCoord(0)(height + 1 | 0)),
                    currentFrame: player.currentFrame,
                    direction: player.direction,
                    falling: player.falling,
                    id: player.id,
                    lastAction: player.lastAction,
                    moved: player.moved,
                    oldDirection: player.oldDirection,
                    playerType: player.playerType,
                    stop: player.stop
                } ];
            };
            return Data_Monoid.mempty(Data_Monoid.monoidArray);
        })();
        var bottom = (function () {
            var $16 = Egg_Types_Coord.totalY(player.coords) > (height * Egg_Types_Tile.tileSize | 0);
            if ($16) {
                return [ {
                    coords: Data_Semigroup.append(Egg_Types_Coord.semigroupCoord)(player.coords)(Egg_Types_Coord.invert(Egg_Types_Coord.createCoord(0)(height + 1 | 0))),
                    currentFrame: player.currentFrame,
                    direction: player.direction,
                    falling: player.falling,
                    id: player.id,
                    lastAction: player.lastAction,
                    moved: player.moved,
                    oldDirection: player.oldDirection,
                    playerType: player.playerType,
                    stop: player.stop
                } ];
            };
            return Data_Monoid.mempty(Data_Monoid.monoidArray);
        })();
        return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ player ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(left)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(right)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(top)(bottom))));
    };
};
var addPlayerToRenderMap = function (player) {
    return function (map) {
        var markCoord = function (v) {
            return function (rMap) {
                return Data_Maybe.fromMaybe(rMap)(Matrix.set(v.x)(v.y)(true)(rMap));
            };
        };
        var coordList = getPlayerCoordList(map)(player);
        return Data_Foldable.foldr(Data_Foldable.foldableArray)(markCoord)(map)(coordList);
    };
};
var addPlayersToRenderMap = function (players) {
    return function (rMap) {
        return Data_Foldable.foldr(Data_Foldable.foldableArray)(addPlayerToRenderMap)(rMap)(players);
    };
};
var gameStatesToRenderMap = function (old) {
    return function ($$new) {
        var boardMap = createRenderMap(old.board)($$new.board);
        var $19 = needsFullRefresh(old)($$new);
        if ($19) {
            return fillWholeBoard(true)($$new.board);
        };
        return addPlayersToRenderMap($$new.players)(addPlayersToRenderMap(old.players)(boardMap));
    };
};
var addEdgePlayers = function (board) {
    return function (players) {
        return Control_Bind.join(Control_Bind.bindArray)(Data_Functor.map(Data_Functor.functorArray)(addPlayers(Egg_Logic_Board.boardSizeFromBoard(board)))(players));
    };
};
module.exports = {
    gameStatesToRenderMap: gameStatesToRenderMap,
    needsFullRefresh: needsFullRefresh,
    createRenderMap: createRenderMap,
    addPlayersToRenderMap: addPlayersToRenderMap,
    addPlayerToRenderMap: addPlayerToRenderMap,
    getPlayerCoordList: getPlayerCoordList,
    fillWholeBoard: fillWholeBoard,
    blankRenderMap: blankRenderMap,
    getRenderList: getRenderList,
    shouldDrawItem: shouldDrawItem,
    shouldDraw: shouldDraw,
    buildRenderArray: buildRenderArray,
    addEdgePlayers: addEdgePlayers,
    addPlayers: addPlayers
};
