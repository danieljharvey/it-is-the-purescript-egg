// Generated by purs version 0.13.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Egg_Logic_Movement = require("../Egg.Logic.Movement/index.js");
var Egg_Types_Coord = require("../Egg.Types.Coord/index.js");
var Egg_Types_CurrentFrame = require("../Egg.Types.CurrentFrame/index.js");
var Egg_Types_LastAction = require("../Egg.Types.LastAction/index.js");
var Egg_Types_Player = require("../Egg.Types.Player/index.js");
var Egg_Types_PlayerType = require("../Egg.Types.PlayerType/index.js");
var Egg_Types_ResourceUrl = require("../Egg.Types.ResourceUrl/index.js");
var Egg_Types_Tile = require("../Egg.Types.Tile/index.js");
var Egg_Types_TileAction = require("../Egg.Types.TileAction/index.js");
var Matrix = require("../Matrix/index.js");
var Test_Spec = require("../Test.Spec/index.js");
var Test_Spec_Assertions = require("../Test.Spec.Assertions/index.js");
var teleport = {
    id: Egg_Types_Tile.defaultTile.id,
    title: Egg_Types_Tile.defaultTile.title,
    img: Egg_Types_Tile.defaultTile.img,
    drawMe: Egg_Types_Tile.defaultTile.drawMe,
    background: Egg_Types_Tile.defaultTile.background,
    frontLayer: Egg_Types_Tile.defaultTile.frontLayer,
    breakable: Egg_Types_Tile.defaultTile.breakable,
    action: Egg_Types_TileAction.Teleport.value,
    dontAdd: Egg_Types_Tile.defaultTile.dontAdd,
    createPlayer: Egg_Types_Tile.defaultTile.createPlayer
};
var flyingPlayer = {
    coords: Egg_Types_Player.defaultPlayer.coords,
    direction: Egg_Types_Player.defaultPlayer.direction,
    oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
    currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
    id: Egg_Types_Player.defaultPlayer.id,
    falling: Egg_Types_Player.defaultPlayer.falling,
    stop: Egg_Types_Player.defaultPlayer.stop,
    lastAction: Egg_Types_Player.defaultPlayer.lastAction,
    moved: Egg_Types_Player.defaultPlayer.moved,
    playerType: {
        frames: Egg_Types_Player.defaultPlayer.playerType.frames,
        img: Egg_Types_Player.defaultPlayer.playerType.img,
        multiplier: Egg_Types_Player.defaultPlayer.playerType.multiplier,
        title: Egg_Types_Player.defaultPlayer.playerType.title,
        type_: Egg_Types_Player.defaultPlayer.playerType.type_,
        fallSpeed: Egg_Types_Player.defaultPlayer.playerType.fallSpeed,
        moveSpeed: Egg_Types_Player.defaultPlayer.playerType.moveSpeed,
        flying: true,
        movePattern: Egg_Types_Player.defaultPlayer.playerType.movePattern
    }
};
var empty = {
    id: Egg_Types_Tile.defaultTile.id,
    title: Egg_Types_Tile.defaultTile.title,
    img: Egg_Types_Tile.defaultTile.img,
    drawMe: Egg_Types_Tile.defaultTile.drawMe,
    background: false,
    frontLayer: Egg_Types_Tile.defaultTile.frontLayer,
    breakable: false,
    action: Egg_Types_Tile.defaultTile.action,
    dontAdd: Egg_Types_Tile.defaultTile.dontAdd,
    createPlayer: Egg_Types_Tile.defaultTile.createPlayer
};
var breakable = {
    id: Egg_Types_Tile.defaultTile.id,
    title: Egg_Types_Tile.defaultTile.title,
    img: Egg_Types_Tile.defaultTile.img,
    drawMe: Egg_Types_Tile.defaultTile.drawMe,
    background: false,
    frontLayer: Egg_Types_Tile.defaultTile.frontLayer,
    breakable: true,
    action: Egg_Types_Tile.defaultTile.action,
    dontAdd: Egg_Types_Tile.defaultTile.dontAdd,
    createPlayer: Egg_Types_Tile.defaultTile.createPlayer
};
var boardFromArray = function (tiles) {
    return Data_Maybe.fromMaybe(Matrix.empty)(Matrix.fromArray(tiles));
};
var bgTile = {
    id: Egg_Types_Tile.defaultTile.id,
    title: Egg_Types_Tile.defaultTile.title,
    img: Egg_Types_Tile.defaultTile.img,
    drawMe: Egg_Types_Tile.defaultTile.drawMe,
    background: true,
    frontLayer: Egg_Types_Tile.defaultTile.frontLayer,
    breakable: false,
    action: Egg_Types_Tile.defaultTile.action,
    dontAdd: Egg_Types_Tile.defaultTile.dontAdd,
    createPlayer: Egg_Types_Tile.defaultTile.createPlayer
};
var tests = Test_Spec.describe(Data_Identity.monadIdentity)("Movement")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("incrementPlayerFrame")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Frame does not change when play is stationary")((function () {
    var newPlayer = Egg_Logic_Movement.incrementPlayerFrame(Egg_Types_Player.defaultPlayer);
    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_CurrentFrame.showCurrentFrame)(Egg_Types_CurrentFrame.eqCurrentFrame)(newPlayer.currentFrame)(Egg_Types_Player.defaultPlayer.currentFrame);
})()))(function () {
    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Wipes old direction when stopped")((function () {
        var oldPlayer = {
            oldDirection: Egg_Types_Coord.createCoord(1)(0),
            coords: Egg_Types_Player.defaultPlayer.coords,
            currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
            direction: Egg_Types_Player.defaultPlayer.direction,
            falling: Egg_Types_Player.defaultPlayer.falling,
            id: Egg_Types_Player.defaultPlayer.id,
            lastAction: Egg_Types_Player.defaultPlayer.lastAction,
            moved: Egg_Types_Player.defaultPlayer.moved,
            playerType: Egg_Types_Player.defaultPlayer.playerType,
            stop: Egg_Types_Player.defaultPlayer.stop
        };
        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "coords";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "currentFrame";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "direction";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "falling";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "id";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "lastAction";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "moved";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "oldDirection";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "playerType";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "stop";
        }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "fallSpeed";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "flying";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "frames";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "img";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "movePattern";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "moveSpeed";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "multiplier";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "title";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "type_";
        }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "stop";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "playerType";
        }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "type_";
        }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
            return "title";
        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
            return "multiplier";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "moveSpeed";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "movePattern";
        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
            return "img";
        }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
            return "frames";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "flying";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "fallSpeed";
        }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
            return "oldDirection";
        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
            return "moved";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "lastAction";
        }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
            return "id";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "falling";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "direction";
        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
            return "currentFrame";
        }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
            return "coords";
        }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.incrementPlayerFrame(oldPlayer))(Egg_Types_Player.defaultPlayer);
    })()))(function () {
        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Decreases current frame when moving left")((function () {
            var oldPlayer = {
                direction: Egg_Types_Coord.createCoord(-1 | 0)(0),
                currentFrame: Egg_Types_CurrentFrame.createCurrentFrame(18),
                coords: Egg_Types_Player.defaultPlayer.coords,
                falling: Egg_Types_Player.defaultPlayer.falling,
                id: Egg_Types_Player.defaultPlayer.id,
                lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                moved: Egg_Types_Player.defaultPlayer.moved,
                oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                playerType: Egg_Types_Player.defaultPlayer.playerType,
                stop: Egg_Types_Player.defaultPlayer.stop
            };
            var newPlayer = Egg_Logic_Movement.incrementPlayerFrame(oldPlayer);
            return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Types_CurrentFrame.getCurrentFrame(newPlayer.currentFrame))(17);
        })()))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Increases current frame when moving right")((function () {
                var oldPlayer = {
                    direction: Egg_Types_Coord.createCoord(1)(0),
                    currentFrame: Egg_Types_CurrentFrame.dec(Egg_Types_CurrentFrame.createCurrentFrame(18)),
                    coords: Egg_Types_Player.defaultPlayer.coords,
                    falling: Egg_Types_Player.defaultPlayer.falling,
                    id: Egg_Types_Player.defaultPlayer.id,
                    lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                    moved: Egg_Types_Player.defaultPlayer.moved,
                    oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                    playerType: Egg_Types_Player.defaultPlayer.playerType,
                    stop: Egg_Types_Player.defaultPlayer.stop
                };
                var newPlayer = Egg_Logic_Movement.incrementPlayerFrame(oldPlayer);
                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Types_CurrentFrame.getCurrentFrame(newPlayer.currentFrame))(0);
            })()))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Decreases current frame when moving up")((function () {
                    var oldPlayer = {
                        direction: Egg_Types_Coord.createCoord(0)(-1 | 0),
                        currentFrame: Egg_Types_CurrentFrame.createCurrentFrame(18),
                        coords: Egg_Types_Player.defaultPlayer.coords,
                        falling: Egg_Types_Player.defaultPlayer.falling,
                        id: Egg_Types_Player.defaultPlayer.id,
                        lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                        moved: Egg_Types_Player.defaultPlayer.moved,
                        oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                        playerType: Egg_Types_Player.defaultPlayer.playerType,
                        stop: Egg_Types_Player.defaultPlayer.stop
                    };
                    var newPlayer = Egg_Logic_Movement.incrementPlayerFrame(oldPlayer);
                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Types_CurrentFrame.getCurrentFrame(newPlayer.currentFrame))(17);
                })()))(function () {
                    return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Increases current frame when moving down")((function () {
                        var oldPlayer = {
                            direction: Egg_Types_Coord.createCoord(0)(1),
                            currentFrame: Egg_Types_CurrentFrame.dec(Egg_Types_CurrentFrame.createCurrentFrame(18)),
                            coords: Egg_Types_Player.defaultPlayer.coords,
                            falling: Egg_Types_Player.defaultPlayer.falling,
                            id: Egg_Types_Player.defaultPlayer.id,
                            lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                            moved: Egg_Types_Player.defaultPlayer.moved,
                            oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                            playerType: Egg_Types_Player.defaultPlayer.playerType,
                            stop: Egg_Types_Player.defaultPlayer.stop
                        };
                        var newPlayer = Egg_Logic_Movement.incrementPlayerFrame(oldPlayer);
                        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Types_CurrentFrame.getCurrentFrame(newPlayer.currentFrame))(0);
                    })());
                });
            });
        });
    });
})))(function () {
    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("calcMoveAmount")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Does one")(Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Logic_Movement.calcMoveAmount(10)(10))(31)))(function () {
        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Does another")(Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Logic_Movement.calcMoveAmount(10)(20))(62)))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Checks that no timePassed does not break it")(Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Logic_Movement.calcMoveAmount(10)(0))(0)))(function () {
                return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Checks that no moveSpeed does not break it")(Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Logic_Movement.calcMoveAmount(0)(10))(0));
            });
        });
    })))(function () {
        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("calcMoveAmount")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Moves left")((function () {
            var player = {
                direction: Egg_Types_Coord.createCoord(-1 | 0)(0),
                coords: Egg_Types_Coord.createCoord(2)(2),
                currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                falling: Egg_Types_Player.defaultPlayer.falling,
                id: Egg_Types_Player.defaultPlayer.id,
                lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                moved: Egg_Types_Player.defaultPlayer.moved,
                oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                playerType: Egg_Types_Player.defaultPlayer.playerType,
                stop: Egg_Types_Player.defaultPlayer.stop
            };
            var expectedMoveAmount = Egg_Logic_Movement.calcMoveAmount(player.playerType.moveSpeed)(100);
            var v = Egg_Logic_Movement.incrementPlayerDirection(100)(player);
            return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(v.coords.offsetX)((-1 | 0) * expectedMoveAmount | 0);
        })()))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Moves right")((function () {
                var player = {
                    direction: Egg_Types_Coord.createCoord(1)(0),
                    coords: Egg_Types_Coord.createCoord(2)(2),
                    currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                    falling: Egg_Types_Player.defaultPlayer.falling,
                    id: Egg_Types_Player.defaultPlayer.id,
                    lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                    moved: Egg_Types_Player.defaultPlayer.moved,
                    oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                    playerType: Egg_Types_Player.defaultPlayer.playerType,
                    stop: Egg_Types_Player.defaultPlayer.stop
                };
                var expectedMoveAmount = Egg_Logic_Movement.calcMoveAmount(player.playerType.moveSpeed)(100);
                var v = Egg_Logic_Movement.incrementPlayerDirection(100)(player);
                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(v.coords.offsetX)(expectedMoveAmount);
            })()))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Moves up")((function () {
                    var player = {
                        direction: Egg_Types_Coord.createCoord(0)(-1 | 0),
                        coords: Egg_Types_Coord.createCoord(2)(2),
                        currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                        falling: Egg_Types_Player.defaultPlayer.falling,
                        id: Egg_Types_Player.defaultPlayer.id,
                        lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                        moved: Egg_Types_Player.defaultPlayer.moved,
                        oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                        playerType: Egg_Types_Player.defaultPlayer.playerType,
                        stop: Egg_Types_Player.defaultPlayer.stop
                    };
                    var expectedMoveAmount = Egg_Logic_Movement.calcMoveAmount(player.playerType.moveSpeed)(100);
                    var v = Egg_Logic_Movement.incrementPlayerDirection(100)(player);
                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(v.coords.offsetY)((-1 | 0) * expectedMoveAmount | 0);
                })()))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Moves down")((function () {
                        var player = {
                            direction: Egg_Types_Coord.createCoord(0)(1),
                            coords: Egg_Types_Coord.createCoord(2)(2),
                            currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                            falling: Egg_Types_Player.defaultPlayer.falling,
                            id: Egg_Types_Player.defaultPlayer.id,
                            lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                            moved: Egg_Types_Player.defaultPlayer.moved,
                            oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                            playerType: Egg_Types_Player.defaultPlayer.playerType,
                            stop: Egg_Types_Player.defaultPlayer.stop
                        };
                        var expectedMoveAmount = Egg_Logic_Movement.calcMoveAmount(player.playerType.moveSpeed)(100);
                        var v = Egg_Logic_Movement.incrementPlayerDirection(100)(player);
                        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(v.coords.offsetY)(expectedMoveAmount);
                    })()))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Egg with no speed stays still")((function () {
                            var player = {
                                direction: Egg_Types_Coord.createCoord(0)(1),
                                coords: Egg_Types_Coord.createCoord(2)(2),
                                playerType: {
                                    moveSpeed: 0,
                                    fallSpeed: Egg_Types_Player.defaultPlayer.playerType.fallSpeed,
                                    flying: Egg_Types_Player.defaultPlayer.playerType.flying,
                                    frames: Egg_Types_Player.defaultPlayer.playerType.frames,
                                    img: Egg_Types_Player.defaultPlayer.playerType.img,
                                    movePattern: Egg_Types_Player.defaultPlayer.playerType.movePattern,
                                    multiplier: Egg_Types_Player.defaultPlayer.playerType.multiplier,
                                    title: Egg_Types_Player.defaultPlayer.playerType.title,
                                    type_: Egg_Types_Player.defaultPlayer.playerType.type_
                                },
                                currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                falling: Egg_Types_Player.defaultPlayer.falling,
                                id: Egg_Types_Player.defaultPlayer.id,
                                lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                moved: Egg_Types_Player.defaultPlayer.moved,
                                oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                stop: Egg_Types_Player.defaultPlayer.stop
                            };
                            var expectedMoveAmount = Egg_Logic_Movement.calcMoveAmount(player.playerType.moveSpeed)(100);
                            var v = Egg_Logic_Movement.incrementPlayerDirection(100)(player);
                            return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(v.coords.offsetY)(0);
                        })()))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Falls downwards")((function () {
                                var player = {
                                    direction: Egg_Types_Coord.createCoord(1)(0),
                                    coords: Egg_Types_Coord.createCoord(2)(2),
                                    falling: true,
                                    currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                    id: Egg_Types_Player.defaultPlayer.id,
                                    lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                    moved: Egg_Types_Player.defaultPlayer.moved,
                                    oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                    playerType: Egg_Types_Player.defaultPlayer.playerType,
                                    stop: Egg_Types_Player.defaultPlayer.stop
                                };
                                var expectedMoveAmount = Egg_Logic_Movement.calcMoveAmount(player.playerType.fallSpeed)(100);
                                var v = Egg_Logic_Movement.incrementPlayerDirection(100)(player);
                                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(v.coords.offsetY)(expectedMoveAmount);
                            })()))(function () {
                                return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Egg with no move speed still falls downwards")((function () {
                                    var player = {
                                        direction: Egg_Types_Coord.createCoord(1)(0),
                                        coords: Egg_Types_Coord.createCoord(2)(2),
                                        falling: true,
                                        playerType: {
                                            moveSpeed: 0,
                                            fallSpeed: 20,
                                            flying: Egg_Types_Player.defaultPlayer.playerType.flying,
                                            frames: Egg_Types_Player.defaultPlayer.playerType.frames,
                                            img: Egg_Types_Player.defaultPlayer.playerType.img,
                                            movePattern: Egg_Types_Player.defaultPlayer.playerType.movePattern,
                                            multiplier: Egg_Types_Player.defaultPlayer.playerType.multiplier,
                                            title: Egg_Types_Player.defaultPlayer.playerType.title,
                                            type_: Egg_Types_Player.defaultPlayer.playerType.type_
                                        },
                                        currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                        id: Egg_Types_Player.defaultPlayer.id,
                                        lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                        moved: Egg_Types_Player.defaultPlayer.moved,
                                        oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                        stop: Egg_Types_Player.defaultPlayer.stop
                                    };
                                    var expectedMoveAmount = Egg_Logic_Movement.calcMoveAmount(player.playerType.fallSpeed)(100);
                                    var v = Egg_Logic_Movement.incrementPlayerDirection(100)(player);
                                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(v.coords.offsetY)(expectedMoveAmount);
                                })());
                            });
                        });
                    });
                });
            });
        })))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("correctTileOverflow")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Overflow remains the same when within boundary")((function () {
                var coord = {
                    x: 1,
                    y: 0,
                    offsetX: 54,
                    offsetY: 0
                };
                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_Coord.showCoord)(Egg_Types_Coord.eqCoord)(Egg_Logic_Movement.correctTileOverflow(coord))(coord);
            })()))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Moves right when overflowing there")((function () {
                    var v = {
                        x: 0,
                        y: 0,
                        offsetX: 150,
                        offsetY: 0
                    };
                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_Coord.showCoord)(Egg_Types_Coord.eqCoord)(Egg_Logic_Movement.correctTileOverflow(v))(Egg_Types_Coord.Coord({
                        x: 1,
                        y: v.y,
                        offsetX: 0,
                        offsetY: v.offsetY
                    }));
                })()))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Moves left when overflowing there")((function () {
                        var v = {
                            x: 3,
                            y: 0,
                            offsetX: -150 | 0,
                            offsetY: 0
                        };
                        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_Coord.showCoord)(Egg_Types_Coord.eqCoord)(Egg_Logic_Movement.correctTileOverflow(v))(Egg_Types_Coord.Coord({
                            x: 2,
                            y: v.y,
                            offsetX: 0,
                            offsetY: v.offsetY
                        }));
                    })()))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Moves up when overflowing there")((function () {
                            var v = {
                                x: 0,
                                y: 4,
                                offsetX: 0,
                                offsetY: -150 | 0
                            };
                            return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_Coord.showCoord)(Egg_Types_Coord.eqCoord)(Egg_Logic_Movement.correctTileOverflow(v))(Egg_Types_Coord.Coord({
                                x: v.x,
                                y: 3,
                                offsetX: v.offsetX,
                                offsetY: 0
                            }));
                        })()))(function () {
                            return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Moves down when overflowing there")((function () {
                                var v = {
                                    x: 0,
                                    y: 4,
                                    offsetX: 0,
                                    offsetY: 150
                                };
                                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_Coord.showCoord)(Egg_Types_Coord.eqCoord)(Egg_Logic_Movement.correctTileOverflow(v))(Egg_Types_Coord.Coord({
                                    x: v.x,
                                    y: 5,
                                    offsetX: v.offsetX,
                                    offsetY: 0
                                }));
                            })());
                        });
                    });
                });
            })))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("correctPlayerOverflow")(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Resets lastAction when moving tiles")((function () {
                    var player = {
                        coords: Egg_Types_Coord.createFullCoord(1)(1)(150)(0),
                        lastAction: new Data_Maybe.Just(Egg_Types_LastAction.Teleported.value),
                        currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                        direction: Egg_Types_Player.defaultPlayer.direction,
                        falling: Egg_Types_Player.defaultPlayer.falling,
                        id: Egg_Types_Player.defaultPlayer.id,
                        moved: Egg_Types_Player.defaultPlayer.moved,
                        oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                        playerType: Egg_Types_Player.defaultPlayer.playerType,
                        stop: Egg_Types_Player.defaultPlayer.stop
                    };
                    var newPlayer = Egg_Logic_Movement.correctPlayerOverflow(player);
                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction))(newPlayer.lastAction)(Data_Maybe.Nothing.value);
                })())))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("correctPlayerMapOverflow")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Does nothing when inside map")((function () {
                        var testMap = boardFromArray([ [ bgTile, bgTile ], [ bgTile, bgTile ] ]);
                        var player = {
                            coords: Egg_Types_Coord.createFullCoord(0)(0)(19)(20),
                            currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                            direction: Egg_Types_Player.defaultPlayer.direction,
                            falling: Egg_Types_Player.defaultPlayer.falling,
                            id: Egg_Types_Player.defaultPlayer.id,
                            lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                            moved: Egg_Types_Player.defaultPlayer.moved,
                            oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                            playerType: Egg_Types_Player.defaultPlayer.playerType,
                            stop: Egg_Types_Player.defaultPlayer.stop
                        };
                        var newPlayer = Egg_Logic_Movement.correctPlayerMapOverflow(testMap)(player);
                        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_Coord.showCoord)(Egg_Types_Coord.eqCoord)(newPlayer.coords)(player.coords);
                    })()))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Corrects when off left hand side of map")((function () {
                            var testMap = boardFromArray([ [ bgTile, bgTile ], [ bgTile, bgTile ] ]);
                            var player = {
                                coords: Egg_Types_Coord.createFullCoord(-1 | 0)(0)(95)(23),
                                currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                direction: Egg_Types_Player.defaultPlayer.direction,
                                falling: Egg_Types_Player.defaultPlayer.falling,
                                id: Egg_Types_Player.defaultPlayer.id,
                                lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                moved: Egg_Types_Player.defaultPlayer.moved,
                                oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                playerType: Egg_Types_Player.defaultPlayer.playerType,
                                stop: Egg_Types_Player.defaultPlayer.stop
                            };
                            var newPlayer = Egg_Logic_Movement.correctPlayerMapOverflow(testMap)(player);
                            return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_Coord.showCoord)(Egg_Types_Coord.eqCoord)(newPlayer.coords)(Egg_Types_Coord.createFullCoord(1)(0)(95)(23));
                        })()))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Corrects when off right hand side of map")((function () {
                                var testMap = boardFromArray([ [ bgTile, bgTile ], [ bgTile, bgTile ] ]);
                                var player = {
                                    coords: Egg_Types_Coord.createFullCoord(2)(0)(10)(20),
                                    currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                    direction: Egg_Types_Player.defaultPlayer.direction,
                                    falling: Egg_Types_Player.defaultPlayer.falling,
                                    id: Egg_Types_Player.defaultPlayer.id,
                                    lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                    moved: Egg_Types_Player.defaultPlayer.moved,
                                    oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                    playerType: Egg_Types_Player.defaultPlayer.playerType,
                                    stop: Egg_Types_Player.defaultPlayer.stop
                                };
                                var newPlayer = Egg_Logic_Movement.correctPlayerMapOverflow(testMap)(player);
                                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_Coord.showCoord)(Egg_Types_Coord.eqCoord)(newPlayer.coords)(Egg_Types_Coord.createFullCoord(0)(0)(10)(20));
                            })()))(function () {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Corrects when off top of map")((function () {
                                    var testMap = boardFromArray([ [ bgTile, bgTile ], [ bgTile, bgTile ] ]);
                                    var player = {
                                        coords: Egg_Types_Coord.createFullCoord(0)(-1 | 0)(12)(22),
                                        currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                        direction: Egg_Types_Player.defaultPlayer.direction,
                                        falling: Egg_Types_Player.defaultPlayer.falling,
                                        id: Egg_Types_Player.defaultPlayer.id,
                                        lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                        moved: Egg_Types_Player.defaultPlayer.moved,
                                        oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                        playerType: Egg_Types_Player.defaultPlayer.playerType,
                                        stop: Egg_Types_Player.defaultPlayer.stop
                                    };
                                    var newPlayer = Egg_Logic_Movement.correctPlayerMapOverflow(testMap)(player);
                                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_Coord.showCoord)(Egg_Types_Coord.eqCoord)(newPlayer.coords)(Egg_Types_Coord.createFullCoord(0)(1)(12)(22));
                                })()))(function () {
                                    return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Corrects when off bottom of map")((function () {
                                        var testMap = boardFromArray([ [ bgTile, bgTile ], [ bgTile, bgTile ] ]);
                                        var player = {
                                            coords: Egg_Types_Coord.createCoord(0)(2),
                                            currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                            direction: Egg_Types_Player.defaultPlayer.direction,
                                            falling: Egg_Types_Player.defaultPlayer.falling,
                                            id: Egg_Types_Player.defaultPlayer.id,
                                            lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                            moved: Egg_Types_Player.defaultPlayer.moved,
                                            oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                            playerType: Egg_Types_Player.defaultPlayer.playerType,
                                            stop: Egg_Types_Player.defaultPlayer.stop
                                        };
                                        var newPlayer = Egg_Logic_Movement.correctPlayerMapOverflow(testMap)(player);
                                        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_Coord.showCoord)(Egg_Types_Coord.eqCoord)(newPlayer.coords)(Egg_Types_Coord.createCoord(0)(0));
                                    })());
                                });
                            });
                        });
                    })))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("checkFloorBelowPlayer")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Fall through breakable block")((function () {
                            var board = boardFromArray([ [ bgTile ], [ breakable ] ]);
                            var player = {
                                falling: true,
                                coords: Egg_Types_Player.defaultPlayer.coords,
                                currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                direction: Egg_Types_Player.defaultPlayer.direction,
                                id: Egg_Types_Player.defaultPlayer.id,
                                lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                moved: Egg_Types_Player.defaultPlayer.moved,
                                oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                playerType: Egg_Types_Player.defaultPlayer.playerType,
                                stop: Egg_Types_Player.defaultPlayer.stop
                            };
                            var newPlayer = Egg_Logic_Movement.checkFloorBelowPlayer(board)(player);
                            return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showBoolean)(Data_Eq.eqBoolean)(newPlayer.falling)(true);
                        })()))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Don't fall through floor")((function () {
                                var board = boardFromArray([ [ bgTile ], [ empty ] ]);
                                var player = {
                                    falling: true,
                                    coords: Egg_Types_Player.defaultPlayer.coords,
                                    currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                    direction: Egg_Types_Player.defaultPlayer.direction,
                                    id: Egg_Types_Player.defaultPlayer.id,
                                    lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                    moved: Egg_Types_Player.defaultPlayer.moved,
                                    oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                    playerType: Egg_Types_Player.defaultPlayer.playerType,
                                    stop: Egg_Types_Player.defaultPlayer.stop
                                };
                                var newPlayer = Egg_Logic_Movement.checkFloorBelowPlayer(board)(player);
                                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showBoolean)(Data_Eq.eqBoolean)(newPlayer.falling)(false);
                            })()))(function () {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Non-flying players fall downwards")((function () {
                                    var board = boardFromArray([ [ bgTile ], [ bgTile ] ]);
                                    var player = {
                                        falling: false,
                                        coords: Egg_Types_Player.defaultPlayer.coords,
                                        currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                        direction: Egg_Types_Player.defaultPlayer.direction,
                                        id: Egg_Types_Player.defaultPlayer.id,
                                        lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                        moved: Egg_Types_Player.defaultPlayer.moved,
                                        oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                        playerType: Egg_Types_Player.defaultPlayer.playerType,
                                        stop: Egg_Types_Player.defaultPlayer.stop
                                    };
                                    var newPlayer = Egg_Logic_Movement.checkFloorBelowPlayer(board)(player);
                                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showBoolean)(Data_Eq.eqBoolean)(newPlayer.falling)(true);
                                })()))(function () {
                                    return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Flying players don't fall through floor")((function () {
                                        var board = boardFromArray([ [ bgTile ], [ bgTile ] ]);
                                        var player = {
                                            falling: true,
                                            coords: flyingPlayer.coords,
                                            currentFrame: flyingPlayer.currentFrame,
                                            direction: flyingPlayer.direction,
                                            id: flyingPlayer.id,
                                            lastAction: flyingPlayer.lastAction,
                                            moved: flyingPlayer.moved,
                                            oldDirection: flyingPlayer.oldDirection,
                                            playerType: flyingPlayer.playerType,
                                            stop: flyingPlayer.stop
                                        };
                                        var newPlayer = Egg_Logic_Movement.checkFloorBelowPlayer(board)(player);
                                        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showBoolean)(Data_Eq.eqBoolean)(newPlayer.falling)(false);
                                    })());
                                });
                            });
                        })))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("playerHasMoved")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Sees we have not moved")(Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showBoolean)(Data_Eq.eqBoolean)(Egg_Logic_Movement.playerHasMoved(Egg_Types_Player.defaultPlayer)(Egg_Types_Player.defaultPlayer))(false)))(function () {
                                return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Sees we have moved")((function () {
                                    var newPlayer = {
                                        coords: Egg_Types_Coord.createCoord(5)(6),
                                        currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                        direction: Egg_Types_Player.defaultPlayer.direction,
                                        falling: Egg_Types_Player.defaultPlayer.falling,
                                        id: Egg_Types_Player.defaultPlayer.id,
                                        lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                        moved: Egg_Types_Player.defaultPlayer.moved,
                                        oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                        playerType: Egg_Types_Player.defaultPlayer.playerType,
                                        stop: Egg_Types_Player.defaultPlayer.stop
                                    };
                                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showBoolean)(Data_Eq.eqBoolean)(Egg_Logic_Movement.playerHasMoved(Egg_Types_Player.defaultPlayer)(newPlayer))(true);
                                })());
                            })))(function () {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("markPlayerIfMoved")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Sees we have not moved")((function () {
                                    var newPlayer = Egg_Logic_Movement.markPlayerIfMoved(Egg_Types_Player.defaultPlayer)(Egg_Types_Player.defaultPlayer);
                                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showBoolean)(Data_Eq.eqBoolean)(newPlayer.moved)(false);
                                })()))(function () {
                                    return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Sees we have moved")((function () {
                                        var newPlayer = {
                                            coords: Egg_Types_Coord.createCoord(5)(6),
                                            currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                            direction: Egg_Types_Player.defaultPlayer.direction,
                                            falling: Egg_Types_Player.defaultPlayer.falling,
                                            id: Egg_Types_Player.defaultPlayer.id,
                                            lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                            moved: Egg_Types_Player.defaultPlayer.moved,
                                            oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                            playerType: Egg_Types_Player.defaultPlayer.playerType,
                                            stop: Egg_Types_Player.defaultPlayer.stop
                                        };
                                        var movedPlayer = Egg_Logic_Movement.markPlayerIfMoved(Egg_Types_Player.defaultPlayer)(newPlayer);
                                        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showBoolean)(Data_Eq.eqBoolean)(movedPlayer.moved)(true);
                                    })());
                                })))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("checkPlayerDirection")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Continues in the same direction when there are no obstacles")((function () {
                                        var board = boardFromArray([ [ bgTile, bgTile, bgTile ] ]);
                                        var player = {
                                            coords: Egg_Types_Coord.createCoord(1)(0),
                                            direction: Egg_Types_Coord.createCoord(-1 | 0)(0),
                                            currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                            falling: Egg_Types_Player.defaultPlayer.falling,
                                            id: Egg_Types_Player.defaultPlayer.id,
                                            lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                            moved: Egg_Types_Player.defaultPlayer.moved,
                                            oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                            playerType: Egg_Types_Player.defaultPlayer.playerType,
                                            stop: Egg_Types_Player.defaultPlayer.stop
                                        };
                                        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "coords";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "currentFrame";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "direction";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "falling";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "id";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "lastAction";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "moved";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "oldDirection";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "playerType";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "stop";
                                        }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "fallSpeed";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "flying";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "frames";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "img";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "movePattern";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "moveSpeed";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "multiplier";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "title";
                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                            return "type_";
                                        }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                            return "stop";
                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                            return "playerType";
                                        }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                            return "type_";
                                        }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
                                            return "title";
                                        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                            return "multiplier";
                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                            return "moveSpeed";
                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                            return "movePattern";
                                        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                            return "img";
                                        }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                                            return "frames";
                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                            return "flying";
                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                            return "fallSpeed";
                                        }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                                            return "oldDirection";
                                        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                            return "moved";
                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                            return "lastAction";
                                        }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
                                            return "id";
                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                            return "falling";
                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                            return "direction";
                                        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                            return "currentFrame";
                                        }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
                                            return "coords";
                                        }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.checkPlayerDirection(board)(player))(player);
                                    })()))(function () {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Bounces off a wall to the left")((function () {
                                            var board = boardFromArray([ [ empty, bgTile, bgTile ] ]);
                                            var player = {
                                                coords: Egg_Types_Coord.createCoord(1)(0),
                                                direction: Egg_Types_Coord.createCoord(-1 | 0)(0),
                                                currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                                falling: Egg_Types_Player.defaultPlayer.falling,
                                                id: Egg_Types_Player.defaultPlayer.id,
                                                lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                                moved: Egg_Types_Player.defaultPlayer.moved,
                                                oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                                playerType: Egg_Types_Player.defaultPlayer.playerType,
                                                stop: Egg_Types_Player.defaultPlayer.stop
                                            };
                                            var expected = {
                                                direction: Egg_Types_Coord.createCoord(1)(0),
                                                coords: player.coords,
                                                currentFrame: player.currentFrame,
                                                falling: player.falling,
                                                id: player.id,
                                                lastAction: player.lastAction,
                                                moved: player.moved,
                                                oldDirection: player.oldDirection,
                                                playerType: player.playerType,
                                                stop: player.stop
                                            };
                                            return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "coords";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "currentFrame";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "direction";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "falling";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "id";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "lastAction";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "moved";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "oldDirection";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "playerType";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "stop";
                                            }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "fallSpeed";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "flying";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "frames";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "img";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "movePattern";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "moveSpeed";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "multiplier";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "title";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "type_";
                                            }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                return "stop";
                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                return "playerType";
                                            }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                return "type_";
                                            }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
                                                return "title";
                                            }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                return "multiplier";
                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                return "moveSpeed";
                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                return "movePattern";
                                            }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                return "img";
                                            }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                                                return "frames";
                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                return "flying";
                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                return "fallSpeed";
                                            }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                                                return "oldDirection";
                                            }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                return "moved";
                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                return "lastAction";
                                            }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
                                                return "id";
                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                return "falling";
                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                return "direction";
                                            }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                return "currentFrame";
                                            }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
                                                return "coords";
                                            }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.checkPlayerDirection(board)(player))(expected);
                                        })()))(function () {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Does not bounce off a wall to the left when falling")((function () {
                                                var board = boardFromArray([ [ empty, bgTile, bgTile ] ]);
                                                var player = {
                                                    coords: Egg_Types_Coord.createCoord(1)(0),
                                                    direction: Egg_Types_Coord.createCoord(-1 | 0)(0),
                                                    falling: true,
                                                    currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                                    id: Egg_Types_Player.defaultPlayer.id,
                                                    lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                                    moved: Egg_Types_Player.defaultPlayer.moved,
                                                    oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                                    playerType: Egg_Types_Player.defaultPlayer.playerType,
                                                    stop: Egg_Types_Player.defaultPlayer.stop
                                                };
                                                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "coords";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "currentFrame";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "direction";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "falling";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "id";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "lastAction";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "moved";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "oldDirection";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "playerType";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "stop";
                                                }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "fallSpeed";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "flying";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "frames";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "img";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "movePattern";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "moveSpeed";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "multiplier";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "title";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "type_";
                                                }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                    return "stop";
                                                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                    return "playerType";
                                                }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                    return "type_";
                                                }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
                                                    return "title";
                                                }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                    return "multiplier";
                                                }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                    return "moveSpeed";
                                                }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                    return "movePattern";
                                                }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                    return "img";
                                                }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                                                    return "frames";
                                                }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                    return "flying";
                                                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                    return "fallSpeed";
                                                }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                                                    return "oldDirection";
                                                }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                    return "moved";
                                                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                    return "lastAction";
                                                }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
                                                    return "id";
                                                }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                    return "falling";
                                                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                    return "direction";
                                                }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                    return "currentFrame";
                                                }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
                                                    return "coords";
                                                }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.checkPlayerDirection(board)(player))(player);
                                            })()))(function () {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Bounces off a wall to the right")((function () {
                                                    var board = boardFromArray([ [ bgTile, bgTile, empty ] ]);
                                                    var player = {
                                                        coords: Egg_Types_Coord.createCoord(1)(0),
                                                        direction: Egg_Types_Coord.createCoord(1)(0),
                                                        currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                                        falling: Egg_Types_Player.defaultPlayer.falling,
                                                        id: Egg_Types_Player.defaultPlayer.id,
                                                        lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                                        moved: Egg_Types_Player.defaultPlayer.moved,
                                                        oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                                        playerType: Egg_Types_Player.defaultPlayer.playerType,
                                                        stop: Egg_Types_Player.defaultPlayer.stop
                                                    };
                                                    var expected = {
                                                        direction: Egg_Types_Coord.createCoord(-1 | 0)(0),
                                                        coords: player.coords,
                                                        currentFrame: player.currentFrame,
                                                        falling: player.falling,
                                                        id: player.id,
                                                        lastAction: player.lastAction,
                                                        moved: player.moved,
                                                        oldDirection: player.oldDirection,
                                                        playerType: player.playerType,
                                                        stop: player.stop
                                                    };
                                                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "coords";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "currentFrame";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "direction";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "falling";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "id";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "lastAction";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "moved";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "oldDirection";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "playerType";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "stop";
                                                    }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "fallSpeed";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "flying";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "frames";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "img";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "movePattern";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "moveSpeed";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "multiplier";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "title";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "type_";
                                                    }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                        return "stop";
                                                    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                        return "playerType";
                                                    }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                        return "type_";
                                                    }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
                                                        return "title";
                                                    }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                        return "multiplier";
                                                    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                        return "moveSpeed";
                                                    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                        return "movePattern";
                                                    }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                        return "img";
                                                    }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                                                        return "frames";
                                                    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                        return "flying";
                                                    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                        return "fallSpeed";
                                                    }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                                                        return "oldDirection";
                                                    }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                        return "moved";
                                                    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                        return "lastAction";
                                                    }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
                                                        return "id";
                                                    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                        return "falling";
                                                    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                        return "direction";
                                                    }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                        return "currentFrame";
                                                    }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
                                                        return "coords";
                                                    }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.checkPlayerDirection(board)(player))(expected);
                                                })()))(function () {
                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Flying player bounce off wall above")((function () {
                                                        var board = boardFromArray([ [ empty, bgTile, bgTile ] ]);
                                                        var player = {
                                                            coords: Egg_Types_Coord.createCoord(0)(1),
                                                            direction: Egg_Types_Coord.createCoord(0)(-1 | 0),
                                                            currentFrame: flyingPlayer.currentFrame,
                                                            falling: flyingPlayer.falling,
                                                            id: flyingPlayer.id,
                                                            lastAction: flyingPlayer.lastAction,
                                                            moved: flyingPlayer.moved,
                                                            oldDirection: flyingPlayer.oldDirection,
                                                            playerType: flyingPlayer.playerType,
                                                            stop: flyingPlayer.stop
                                                        };
                                                        var expected = {
                                                            direction: Egg_Types_Coord.createCoord(0)(1),
                                                            coords: player.coords,
                                                            currentFrame: player.currentFrame,
                                                            falling: player.falling,
                                                            id: player.id,
                                                            lastAction: player.lastAction,
                                                            moved: player.moved,
                                                            oldDirection: player.oldDirection,
                                                            playerType: player.playerType,
                                                            stop: player.stop
                                                        };
                                                        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "coords";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "currentFrame";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "direction";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "falling";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "id";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "lastAction";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "moved";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "oldDirection";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "playerType";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "stop";
                                                        }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "fallSpeed";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "flying";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "frames";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "img";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "movePattern";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "moveSpeed";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "multiplier";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "title";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "type_";
                                                        }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                            return "stop";
                                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                            return "playerType";
                                                        }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                            return "type_";
                                                        }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
                                                            return "title";
                                                        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                            return "multiplier";
                                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                            return "moveSpeed";
                                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                            return "movePattern";
                                                        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                            return "img";
                                                        }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                                                            return "frames";
                                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                            return "flying";
                                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                            return "fallSpeed";
                                                        }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                                                            return "oldDirection";
                                                        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                            return "moved";
                                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                            return "lastAction";
                                                        }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
                                                            return "id";
                                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                            return "falling";
                                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                            return "direction";
                                                        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                            return "currentFrame";
                                                        }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
                                                            return "coords";
                                                        }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.checkPlayerDirection(board)(player))(expected);
                                                    })()))(function () {
                                                        return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Flying player bounce off floor below")((function () {
                                                            var board = boardFromArray([ [ empty, bgTile, bgTile ] ]);
                                                            var player = {
                                                                coords: Egg_Types_Coord.createCoord(0)(1),
                                                                direction: Egg_Types_Coord.createCoord(0)(1),
                                                                currentFrame: flyingPlayer.currentFrame,
                                                                falling: flyingPlayer.falling,
                                                                id: flyingPlayer.id,
                                                                lastAction: flyingPlayer.lastAction,
                                                                moved: flyingPlayer.moved,
                                                                oldDirection: flyingPlayer.oldDirection,
                                                                playerType: flyingPlayer.playerType,
                                                                stop: flyingPlayer.stop
                                                            };
                                                            var expected = {
                                                                direction: Egg_Types_Coord.createCoord(0)(-1 | 0),
                                                                coords: player.coords,
                                                                currentFrame: player.currentFrame,
                                                                falling: player.falling,
                                                                id: player.id,
                                                                lastAction: player.lastAction,
                                                                moved: player.moved,
                                                                oldDirection: player.oldDirection,
                                                                playerType: player.playerType,
                                                                stop: player.stop
                                                            };
                                                            return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "coords";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "currentFrame";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "direction";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "falling";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "id";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "lastAction";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "moved";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "oldDirection";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "playerType";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "stop";
                                                            }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "fallSpeed";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "flying";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "frames";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "img";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "movePattern";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "moveSpeed";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "multiplier";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "title";
                                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                                return "type_";
                                                            }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                                return "stop";
                                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                                return "playerType";
                                                            }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                                return "type_";
                                                            }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
                                                                return "title";
                                                            }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                                return "multiplier";
                                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                                return "moveSpeed";
                                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                                return "movePattern";
                                                            }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                                return "img";
                                                            }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                                                                return "frames";
                                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                                return "flying";
                                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                                return "fallSpeed";
                                                            }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                                                                return "oldDirection";
                                                            }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                                return "moved";
                                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                                return "lastAction";
                                                            }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
                                                                return "id";
                                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                                return "falling";
                                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                                return "direction";
                                                            }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                                return "currentFrame";
                                                            }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
                                                                return "coords";
                                                            }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.checkPlayerDirection(board)(player))(expected);
                                                        })());
                                                    });
                                                });
                                            });
                                        });
                                    })))(function () {
                                        return Test_Spec.describe(Data_Identity.monadIdentity)("checkMovementTile")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Does nothing on normal tile")((function () {
                                            var player = {
                                                coords: Egg_Types_Coord.createCoord(0)(0),
                                                currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                                direction: Egg_Types_Player.defaultPlayer.direction,
                                                falling: Egg_Types_Player.defaultPlayer.falling,
                                                id: Egg_Types_Player.defaultPlayer.id,
                                                lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                                moved: Egg_Types_Player.defaultPlayer.moved,
                                                oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                                playerType: Egg_Types_Player.defaultPlayer.playerType,
                                                stop: Egg_Types_Player.defaultPlayer.stop
                                            };
                                            var board = boardFromArray([ [ empty, empty ] ]);
                                            return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "coords";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "currentFrame";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "direction";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "falling";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "id";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "lastAction";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "moved";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "oldDirection";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "playerType";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "stop";
                                            }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "fallSpeed";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "flying";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "frames";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "img";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "movePattern";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "moveSpeed";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "multiplier";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "title";
                                            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                return "type_";
                                            }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                return "stop";
                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                return "playerType";
                                            }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                return "type_";
                                            }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
                                                return "title";
                                            }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                return "multiplier";
                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                return "moveSpeed";
                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                return "movePattern";
                                            }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                return "img";
                                            }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                                                return "frames";
                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                return "flying";
                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                return "fallSpeed";
                                            }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                                                return "oldDirection";
                                            }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                return "moved";
                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                return "lastAction";
                                            }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
                                                return "id";
                                            }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                return "falling";
                                            }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                return "direction";
                                            }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                return "currentFrame";
                                            }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
                                                return "coords";
                                            }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.checkMovementTile(board)(player))(player);
                                        })()))(function () {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Stays in place when only one teleport")((function () {
                                                var player = {
                                                    coords: Egg_Types_Coord.createCoord(0)(0),
                                                    currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                                    direction: Egg_Types_Player.defaultPlayer.direction,
                                                    falling: Egg_Types_Player.defaultPlayer.falling,
                                                    id: Egg_Types_Player.defaultPlayer.id,
                                                    lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                                    moved: Egg_Types_Player.defaultPlayer.moved,
                                                    oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                                    playerType: Egg_Types_Player.defaultPlayer.playerType,
                                                    stop: Egg_Types_Player.defaultPlayer.stop
                                                };
                                                var board = boardFromArray([ [ teleport, empty ] ]);
                                                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "coords";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "currentFrame";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "direction";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "falling";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "id";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "lastAction";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "moved";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "oldDirection";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "playerType";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "stop";
                                                }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "fallSpeed";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "flying";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "frames";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "img";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "movePattern";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "moveSpeed";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "multiplier";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "title";
                                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                    return "type_";
                                                }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                    return "stop";
                                                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                    return "playerType";
                                                }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                    return "type_";
                                                }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
                                                    return "title";
                                                }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                    return "multiplier";
                                                }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                    return "moveSpeed";
                                                }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                    return "movePattern";
                                                }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                    return "img";
                                                }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                                                    return "frames";
                                                }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                    return "flying";
                                                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                    return "fallSpeed";
                                                }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                                                    return "oldDirection";
                                                }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                    return "moved";
                                                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                    return "lastAction";
                                                }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
                                                    return "id";
                                                }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                    return "falling";
                                                }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                    return "direction";
                                                }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                    return "currentFrame";
                                                }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
                                                    return "coords";
                                                }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.checkMovementTile(board)(player))(player);
                                            })()))(function () {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Moves to other teleport tile")((function () {
                                                    var player = {
                                                        coords: Egg_Types_Coord.createCoord(0)(0),
                                                        currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                                        direction: Egg_Types_Player.defaultPlayer.direction,
                                                        falling: Egg_Types_Player.defaultPlayer.falling,
                                                        id: Egg_Types_Player.defaultPlayer.id,
                                                        lastAction: Egg_Types_Player.defaultPlayer.lastAction,
                                                        moved: Egg_Types_Player.defaultPlayer.moved,
                                                        oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                                        playerType: Egg_Types_Player.defaultPlayer.playerType,
                                                        stop: Egg_Types_Player.defaultPlayer.stop
                                                    };
                                                    var expectedPlayer = {
                                                        coords: Egg_Types_Coord.createCoord(1)(0),
                                                        lastAction: new Data_Maybe.Just(Egg_Types_LastAction.Teleported.value),
                                                        currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                                        direction: Egg_Types_Player.defaultPlayer.direction,
                                                        falling: Egg_Types_Player.defaultPlayer.falling,
                                                        id: Egg_Types_Player.defaultPlayer.id,
                                                        moved: Egg_Types_Player.defaultPlayer.moved,
                                                        oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                                        playerType: Egg_Types_Player.defaultPlayer.playerType,
                                                        stop: Egg_Types_Player.defaultPlayer.stop
                                                    };
                                                    var board = boardFromArray([ [ teleport, teleport ] ]);
                                                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "coords";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "currentFrame";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "direction";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "falling";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "id";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "lastAction";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "moved";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "oldDirection";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "playerType";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "stop";
                                                    }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "fallSpeed";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "flying";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "frames";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "img";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "movePattern";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "moveSpeed";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "multiplier";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "title";
                                                    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                        return "type_";
                                                    }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                        return "stop";
                                                    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                        return "playerType";
                                                    }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                        return "type_";
                                                    }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
                                                        return "title";
                                                    }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                        return "multiplier";
                                                    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                        return "moveSpeed";
                                                    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                        return "movePattern";
                                                    }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                        return "img";
                                                    }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                                                        return "frames";
                                                    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                        return "flying";
                                                    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                        return "fallSpeed";
                                                    }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                                                        return "oldDirection";
                                                    }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                        return "moved";
                                                    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                        return "lastAction";
                                                    }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
                                                        return "id";
                                                    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                        return "falling";
                                                    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                        return "direction";
                                                    }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                        return "currentFrame";
                                                    }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
                                                        return "coords";
                                                    }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.checkMovementTile(board)(player))(expectedPlayer);
                                                })()))(function () {
                                                    return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Does not move when last action was teleports")((function () {
                                                        var player = {
                                                            coords: Egg_Types_Coord.createCoord(0)(0),
                                                            lastAction: new Data_Maybe.Just(Egg_Types_LastAction.Teleported.value),
                                                            currentFrame: Egg_Types_Player.defaultPlayer.currentFrame,
                                                            direction: Egg_Types_Player.defaultPlayer.direction,
                                                            falling: Egg_Types_Player.defaultPlayer.falling,
                                                            id: Egg_Types_Player.defaultPlayer.id,
                                                            moved: Egg_Types_Player.defaultPlayer.moved,
                                                            oldDirection: Egg_Types_Player.defaultPlayer.oldDirection,
                                                            playerType: Egg_Types_Player.defaultPlayer.playerType,
                                                            stop: Egg_Types_Player.defaultPlayer.stop
                                                        };
                                                        var board = boardFromArray([ [ teleport, teleport ] ]);
                                                        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "coords";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "currentFrame";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "direction";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "falling";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "id";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "lastAction";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "moved";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "oldDirection";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "playerType";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "stop";
                                                        }))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "fallSpeed";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "flying";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "frames";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "img";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "movePattern";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "moveSpeed";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "multiplier";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "title";
                                                        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                                            return "type_";
                                                        }))(Data_Show.showRecordFieldsNil)(Egg_Types_PlayerType.showPlayerKind))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showString))(Egg_Types_ResourceUrl.showResourceUrl))(Data_Show.showInt))(Data_Show.showBoolean))(Data_Show.showInt))))(Egg_Types_Coord.showCoord))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Egg_Types_LastAction.showLastAction)))(Data_Show.showInt))(Data_Show.showBoolean))(Egg_Types_Coord.showCoord))(Egg_Types_CurrentFrame.showCurrentFrame))(Egg_Types_Coord.showCoord)))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                            return "stop";
                                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                            return "playerType";
                                                        }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                                            return "type_";
                                                        }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
                                                            return "title";
                                                        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                            return "multiplier";
                                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                            return "moveSpeed";
                                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                            return "movePattern";
                                                        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                                                            return "img";
                                                        }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
                                                            return "frames";
                                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                            return "flying";
                                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                            return "fallSpeed";
                                                        }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                                                            return "oldDirection";
                                                        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                            return "moved";
                                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                            return "lastAction";
                                                        }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
                                                            return "id";
                                                        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                                                            return "falling";
                                                        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
                                                            return "direction";
                                                        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
                                                            return "currentFrame";
                                                        }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
                                                            return "coords";
                                                        }))(Egg_Types_Coord.eqCoord)))(Egg_Logic_Movement.checkMovementTile(board)(player))(player);
                                                    })());
                                                });
                                            });
                                        }));
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}));
module.exports = {
    bgTile: bgTile,
    breakable: breakable,
    teleport: teleport,
    empty: empty,
    boardFromArray: boardFromArray,
    flyingPlayer: flyingPlayer,
    tests: tests
};
