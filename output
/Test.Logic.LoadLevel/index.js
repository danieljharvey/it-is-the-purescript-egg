// Generated by purs version 0.13.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Egg_Logic_LoadLevel = require("../Egg.Logic.LoadLevel/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var Node_FS_Aff = require("../Node.FS.Aff/index.js");
var Test_Spec = require("../Test.Spec/index.js");
var Test_Spec_Assertions = require("../Test.Spec.Assertions/index.js");
var loadLevelFromFile = function (i) {
    var path = "./public/levels/" + (Data_Show.show(Data_Show.showInt)(i) + ".json");
    return Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(path);
};
var levelIds = Data_Array.range(1)(19);
var canReadJSON = function (i) {
    return Control_Bind.bind(Effect_Aff.bindAff)(loadLevelFromFile(i))(function (v) {
        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Tuple.showTuple(Data_Show.showBoolean)(Data_Show.showInt))(Data_Tuple.eqTuple(Data_Eq.eqBoolean)(Data_Eq.eqInt))(new Data_Tuple.Tuple(Data_Maybe.isJust(Egg_Logic_LoadLevel.readLevelJSON(v)), i))(new Data_Tuple.Tuple(true, i));
    });
};
var canLoadLevel = function (i) {
    return Control_Bind.bind(Effect_Aff.bindAff)(loadLevelFromFile(i))(function (v) {
        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Tuple.showTuple(Data_Show.showBoolean)(Data_Show.showInt))(Data_Tuple.eqTuple(Data_Eq.eqBoolean)(Data_Eq.eqInt))(new Data_Tuple.Tuple(Data_Maybe.isJust(Egg_Logic_LoadLevel.readLevel(v)), i))(new Data_Tuple.Tuple(true, i));
    });
};
var canLoadFiles = function (i) {
    return Control_Bind.bind(Effect_Aff.bindAff)(loadLevelFromFile(i))(function (v) {
        return Test_Spec_Assertions.shouldSatisfy(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_String_CodePoints.length(v))(function (v1) {
            return v1 > 0;
        });
    });
};
var tests = Test_Spec.describe(Data_Identity.monadIdentity)("LoadLevel")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("canLoadFiles")(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Loads files for levels 1-19")(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(canLoadFiles)(levelIds))))(function () {
    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("readLevelJSON")(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Reads JSON for levels 1-19")(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(canReadJSON)(levelIds))))(function () {
        return Test_Spec.describe(Data_Identity.monadIdentity)("readLevel")(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Reads levels 1-19")(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(canLoadLevel)(levelIds)));
    });
}));
module.exports = {
    loadLevelFromFile: loadLevelFromFile,
    levelIds: levelIds,
    canLoadFiles: canLoadFiles,
    canLoadLevel: canLoadLevel,
    canReadJSON: canReadJSON,
    tests: tests
};
