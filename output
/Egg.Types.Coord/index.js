// Generated by purs version 0.13.5
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Coord = function (x) {
    return x;
};
var subparts = 64;
var totalX = function (v) {
    return (v.x * subparts | 0) + v.offsetX | 0;
};
var totalY = function (v) {
    return (v.y * subparts | 0) + v.offsetY | 0;
};
var showCoord = new Data_Show.Show(function (v) {
    return "(" + (Data_Show.show(Data_Show.showInt)(v.x) + ("." + (Data_Show.show(Data_Show.showInt)(v.offsetX) + (", " + (Data_Show.show(Data_Show.showInt)(v.y) + ("." + (Data_Show.show(Data_Show.showInt)(v.offsetY) + ")")))))));
});
var semigroupCoord = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return {
            x: v.x + v1.x | 0,
            y: v.y + v1.y | 0,
            offsetX: v.offsetX + v1.offsetX | 0,
            offsetY: v.offsetY + v1.offsetY | 0
        };
    };
});
var ordCoord = Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
    return "y";
}))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
    return "x";
}))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
    return "offsetY";
}))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
    return "offsetX";
}))(Data_Ord.ordInt));
var justOffset = function (v) {
    return Coord({
        x: 0,
        y: 0,
        offsetX: v.offsetX,
        offsetY: v.offsetY
    });
};
var isCentered = function (v) {
    return v.offsetX === 0 && v.offsetY === 0;
};
var invert = function (v) {
    return {
        x: (-1 | 0) * v.x | 0,
        y: (-1 | 0) * v.y | 0,
        offsetX: (-1 | 0) * v.offsetX | 0,
        offsetY: (-1 | 0) * v.offsetY | 0
    };
};
var eqInts = function (v) {
    return function (x) {
        return function (y) {
            return v.x === x && v.y === y;
        };
    };
};
var eqCoord = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
    return "y";
}))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
    return "x";
}))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
    return "offsetY";
}))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
    return "offsetX";
}))(Data_Eq.eqInt));
var difference = function (a) {
    return function (b) {
        return Data_Semigroup.append(semigroupCoord)(a)(invert(b));
    };
};
var createFullCoord = function (x) {
    return function (y) {
        return function (offsetX) {
            return function (offsetY) {
                return {
                    x: x,
                    y: y,
                    offsetX: offsetX,
                    offsetY: offsetY
                };
            };
        };
    };
};
var createMoveCoord = function (speed) {
    return function (v) {
        var newY = speed * v.y | 0;
        var newX = speed * v.x | 0;
        return createFullCoord(0)(0)(newX)(newY);
    };
};
var createCoord = function (x) {
    return function (y) {
        return {
            x: x,
            y: y,
            offsetX: 0,
            offsetY: 0
        };
    };
};
var compare = function (aim) {
    return function (current) {
        if (aim < current) {
            return -1 | 0;
        };
        if (aim > current) {
            return 1;
        };
        if (Data_Boolean.otherwise) {
            return 0;
        };
        throw new Error("Failed pattern match at Egg.Types.Coord (line 83, column 1 - line 83, column 29): " + [ aim.constructor.name, current.constructor.name ]);
    };
};
var directionCoord = function (v) {
    return function (v1) {
        var y = compare(v1.y)(v.y);
        var x = compare(v1.x)(v.x);
        return createCoord(x)(y);
    };
};
var center = function (v) {
    return Coord({
        x: v.x,
        y: v.y,
        offsetX: 0,
        offsetY: 0
    });
};
module.exports = {
    subparts: subparts,
    Coord: Coord,
    invert: invert,
    createCoord: createCoord,
    createFullCoord: createFullCoord,
    createMoveCoord: createMoveCoord,
    justOffset: justOffset,
    totalX: totalX,
    totalY: totalY,
    difference: difference,
    isCentered: isCentered,
    center: center,
    eqInts: eqInts,
    directionCoord: directionCoord,
    compare: compare,
    eqCoord: eqCoord,
    ordCoord: ordCoord,
    showCoord: showCoord,
    semigroupCoord: semigroupCoord
};
