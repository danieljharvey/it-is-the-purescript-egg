// Generated by purs version 0.13.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var ResizeWindow = (function () {
    function ResizeWindow(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ResizeWindow.create = function (value0) {
        return function (value1) {
            return new ResizeWindow(value0, value1);
        };
    };
    return ResizeWindow;
})();
var KeyPress = (function () {
    function KeyPress(value0) {
        this.value0 = value0;
    };
    KeyPress.create = function (value0) {
        return new KeyPress(value0);
    };
    return KeyPress;
})();
var LeftArrow = (function () {
    function LeftArrow() {

    };
    LeftArrow.value = new LeftArrow();
    return LeftArrow;
})();
var RightArrow = (function () {
    function RightArrow() {

    };
    RightArrow.value = new RightArrow();
    return RightArrow;
})();
var Pause = (function () {
    function Pause() {

    };
    Pause.value = new Pause();
    return Pause;
})();
var showInputEvent = new Data_Show.Show(function (v) {
    if (v instanceof ResizeWindow) {
        return "ResizeWindow " + (Data_Show.show(Data_Show.showInt)(v.value0) + (", " + Data_Show.show(Data_Show.showInt)(v.value1)));
    };
    if (v instanceof KeyPress) {
        return "KeyPress " + v.value0;
    };
    if (v instanceof LeftArrow) {
        return "LeftArrow";
    };
    if (v instanceof RightArrow) {
        return "RightArrow";
    };
    if (v instanceof Pause) {
        return "Pause";
    };
    throw new Error("Failed pattern match at Egg.Types.InputEvent (line 18, column 1 - line 23, column 36): " + [ v.constructor.name ]);
});
var eqInputEvent = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof ResizeWindow && y instanceof ResizeWindow) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof KeyPress && y instanceof KeyPress) {
            return x.value0 === y.value0;
        };
        if (x instanceof LeftArrow && y instanceof LeftArrow) {
            return true;
        };
        if (x instanceof RightArrow && y instanceof RightArrow) {
            return true;
        };
        if (x instanceof Pause && y instanceof Pause) {
            return true;
        };
        return false;
    };
});
var ordInputEvent = new Data_Ord.Ord(function () {
    return eqInputEvent;
}, function (x) {
    return function (y) {
        if (x instanceof ResizeWindow && y instanceof ResizeWindow) {
            var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordInt)(x.value1)(y.value1);
        };
        if (x instanceof ResizeWindow) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof ResizeWindow) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof KeyPress && y instanceof KeyPress) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof KeyPress) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof KeyPress) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof LeftArrow && y instanceof LeftArrow) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof LeftArrow) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof LeftArrow) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof RightArrow && y instanceof RightArrow) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof RightArrow) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof RightArrow) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Pause && y instanceof Pause) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Egg.Types.InputEvent (line 16, column 1 - line 16, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    ResizeWindow: ResizeWindow,
    KeyPress: KeyPress,
    LeftArrow: LeftArrow,
    RightArrow: RightArrow,
    Pause: Pause,
    eqInputEvent: eqInputEvent,
    ordInputEvent: ordInputEvent,
    showInputEvent: showInputEvent
};
