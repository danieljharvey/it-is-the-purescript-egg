// Generated by purs version 0.13.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Egg_Data_TileSet = require("../Egg.Data.TileSet/index.js");
var Egg_Types_Tile = require("../Egg.Types.Tile/index.js");
var Matrix = require("../Matrix/index.js");
var Simple_JSON = require("../Simple.JSON/index.js");
var readLevelJSON = function (str) {
    return Data_Either.hush(Simple_JSON.readJSON(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "board";
    }))(Simple_JSON.readArray(Simple_JSON.readArray(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "id";
    }))(Simple_JSON.readInt)(Simple_JSON.readFieldsNil)()()))))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "boardSize";
    }))(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "height";
    }))(Simple_JSON.readInt)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "width";
    }))(Simple_JSON.readInt)(Simple_JSON.readFieldsNil)()())()()))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "levelID";
    }))(Simple_JSON.readInt)(Simple_JSON.readFieldsNil)()())()())()()))(str));
};
var getTileById = function (tiles) {
    return function (i) {
        var foundTile = Data_Map_Internal.lookup(Data_Ord.ordInt)(i)(tiles);
        return Data_Maybe.fromMaybe(Egg_Types_Tile.emptyTile)(foundTile);
    };
};
var tileFromJSON = function (tiles) {
    return function (json) {
        return getTileById(tiles)(json.id);
    };
};
var createBoard = function (tiles) {
    return function (json) {
        var matrix = Matrix.fromArray(json);
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Matrix.functorMatrix)(tileFromJSON(tiles)))(matrix);
    };
};
var cleanString = Data_String_Common.trim;
var checkWidthAndHeight = function (board) {
    return function (bs) {
        var $4 = bs.width === Matrix.width(board) && bs.height === Matrix.height(board);
        if ($4) {
            return new Data_Maybe.Just(bs);
        };
        return Data_Maybe.Nothing.value;
    };
};
var convert = function (tiles) {
    return function (json) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(json.levelID))(function (v) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(createBoard(tiles)(json.board))(function (v1) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(checkWidthAndHeight(v1)(json.boardSize))(function (v2) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                        board: v1,
                        boardSize: v2,
                        levelId: v
                    });
                });
            });
        });
    };
};
var readLevel = function (str) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(readLevelJSON(str))(function (v) {
        return convert(Egg_Data_TileSet.tiles)(v);
    });
};
module.exports = {
    createBoard: createBoard,
    checkWidthAndHeight: checkWidthAndHeight,
    convert: convert,
    cleanString: cleanString,
    readLevelJSON: readLevelJSON,
    readLevel: readLevel,
    tileFromJSON: tileFromJSON,
    getTileById: getTileById
};
