// Generated by purs version 0.13.5
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Egg_Logic_Board = require("../Egg.Logic.Board/index.js");
var Egg_Logic_Map = require("../Egg.Logic.Map/index.js");
var Egg_Types_Coord = require("../Egg.Types.Coord/index.js");
var Egg_Types_Outcome = require("../Egg.Types.Outcome/index.js");
var Egg_Types_Score = require("../Egg.Types.Score/index.js");
var Egg_Types_Tile = require("../Egg.Types.Tile/index.js");
var Egg_Types_TileAction = require("../Egg.Types.TileAction/index.js");
var returnOutcome = function (newOutcome) {
    return function (vals) {
        return {
            outcome: newOutcome,
            board: vals.board,
            score: vals.score
        };
    };
};
var playerIsOverTile = function (player) {
    return Egg_Types_Coord.isCentered(player.coords) && player.moved;
};
var getPlayerTile = function (player) {
    return function (board) {
        var $8 = playerIsOverTile(player);
        if ($8) {
            return new Data_Maybe.Just(Egg_Logic_Board.getTileByCoord(board)(player.coords));
        };
        return Data_Maybe.Nothing.value;
    };
};
var doSwitch = function (colour) {
    return function (vals) {
        var newBoard = function (old) {
            return function ($$new) {
                return Egg_Logic_Map.switchTiles(old)($$new)(vals.board);
            };
        };
        if (colour instanceof Egg_Types_TileAction.Pink) {
            return {
                outcome: vals.outcome,
                board: newBoard(15)(16),
                score: vals.score
            };
        };
        if (colour instanceof Egg_Types_TileAction.Green) {
            return {
                outcome: vals.outcome,
                board: newBoard(18)(19),
                score: vals.score
            };
        };
        throw new Error("Failed pattern match at Egg.Logic.Action (line 77, column 24 - line 79, column 43): " + [ colour.constructor.name ]);
    };
};
var collectItem = function (addScore) {
    return function (coords) {
        return function (v) {
            var newBoard = Egg_Logic_Board.replaceTile(v.board)(coords)(Egg_Types_Tile.emptyTile);
            return {
                outcome: v.outcome,
                board: newBoard,
                score: Data_Semiring.add(Egg_Types_Score.semiringScore)(v.score)(addScore)
            };
        };
    };
};
var doTileAction = function (action) {
    return function (coords) {
        return function (vals) {
            if (action instanceof Egg_Types_TileAction.Collectable) {
                return collectItem(action.value0)(coords)(vals);
            };
            if (action instanceof Egg_Types_TileAction.CompleteLevel) {
                return returnOutcome(Egg_Types_Outcome.BackAtTheEggCup.value)(vals);
            };
            if (action instanceof Egg_Types_TileAction.Switch) {
                return doSwitch(action.value0)(vals);
            };
            return vals;
        };
    };
};
var checkTileBelowPlayer = function (board) {
    return function (player) {
        var belowCoords = Data_Semigroup.append(Egg_Types_Coord.semigroupCoord)(player.coords)(Egg_Types_Coord.createCoord(0)(1));
        var belowTile = Egg_Logic_Board.getTileByCoord(board)(belowCoords);
        var $19 = belowTile.breakable && player.falling;
        if ($19) {
            return Egg_Logic_Board.replaceTile(board)(belowCoords)(Egg_Types_Tile.emptyTile);
        };
        return board;
    };
};
var checkPlayerTileAction = function (player) {
    return function (board) {
        return function (score) {
            return function (outcome) {
                var v = Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                    return v1.action;
                })(getPlayerTile(player)(board));
                if (v instanceof Data_Maybe.Just) {
                    return doTileAction(v.value0)(player.coords)({
                        outcome: outcome,
                        board: board,
                        score: score
                    });
                };
                return {
                    outcome: outcome,
                    board: board,
                    score: score
                };
            };
        };
    };
};
var checkAllTilesBelowPlayer = function (gameState) {
    var combine = function (player$prime) {
        return function (board$prime) {
            return checkTileBelowPlayer(board$prime)(player$prime);
        };
    };
    var newBoard = Data_Foldable.foldr(Data_Foldable.foldableArray)(combine)(gameState.board)(gameState.players);
    return {
        players: gameState.players,
        board: newBoard,
        score: gameState.score,
        rotations: gameState.rotations,
        rotateAngle: gameState.rotateAngle,
        renderAngle: gameState.renderAngle,
        outcome: gameState.outcome,
        turns: gameState.turns,
        current: gameState.current,
        screenSize: gameState.screenSize
    };
};
var checkAllPlayerTileActions = function (gameState) {
    var checkPlayer = function (player) {
        return function (gameState$prime) {
            var tileReturn = checkPlayerTileAction(player)(gameState$prime.board)(gameState$prime.score)(gameState$prime.outcome);
            return {
                outcome: tileReturn.outcome,
                board: tileReturn.board,
                score: tileReturn.score,
                current: gameState$prime.current,
                players: gameState$prime.players,
                renderAngle: gameState$prime.renderAngle,
                rotateAngle: gameState$prime.rotateAngle,
                rotations: gameState$prime.rotations,
                screenSize: gameState$prime.screenSize,
                turns: gameState$prime.turns
            };
        };
    };
    return Data_Foldable.foldr(Data_Foldable.foldableArray)(checkPlayer)(gameState)(gameState.players);
};
var checkAllActions = function ($22) {
    return checkAllPlayerTileActions(checkAllTilesBelowPlayer($22));
};
module.exports = {
    checkAllActions: checkAllActions,
    checkAllPlayerTileActions: checkAllPlayerTileActions,
    checkPlayerTileAction: checkPlayerTileAction,
    playerIsOverTile: playerIsOverTile,
    getPlayerTile: getPlayerTile,
    doTileAction: doTileAction,
    returnOutcome: returnOutcome,
    collectItem: collectItem,
    doSwitch: doSwitch,
    checkAllTilesBelowPlayer: checkAllTilesBelowPlayer,
    checkTileBelowPlayer: checkTileBelowPlayer
};
