// Generated by purs version 0.13.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Egg_Dom_Canvas = require("../Egg.Dom.Canvas/index.js");
var Egg_Logic_Board = require("../Egg.Logic.Board/index.js");
var Egg_Logic_Map = require("../Egg.Logic.Map/index.js");
var Egg_Logic_RenderMap = require("../Egg.Logic.RenderMap/index.js");
var Egg_Types_Clockwise = require("../Egg.Types.Clockwise/index.js");
var Egg_Types_Coord = require("../Egg.Types.Coord/index.js");
var Egg_Types_CurrentFrame = require("../Egg.Types.CurrentFrame/index.js");
var Egg_Types_RenderAngle = require("../Egg.Types.RenderAngle/index.js");
var Egg_Types_ResourceUrl = require("../Egg.Types.ResourceUrl/index.js");
var Egg_Types_ScreenSize = require("../Egg.Types.ScreenSize/index.js");
var Matrix = require("../Matrix/index.js");
var toCoord = function (item) {
    return Egg_Types_Coord.createCoord(item.x)(item.y);
};
var sizeCanvasData = function (old) {
    return function (canvasData) {
        return {
            buffer: canvasData.buffer,
            screen: {
                element: canvasData.screen.element,
                context: canvasData.screen.context,
                size: Egg_Types_ScreenSize.smallest(old.screenSize)
            },
            imageMap: canvasData.imageMap
        };
    };
};
var showRenderingTiles = function (canvasData) {
    return function (renderMap) {
        var clearList = Egg_Logic_RenderMap.getRenderList(renderMap);
        return function __do() {
            var v = Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(function (coord) {
                return Egg_Dom_Canvas.fillTile(canvasData.buffer.context)(coord);
            })(clearList)();
            return Data_Unit.unit;
        };
    };
};
var rotatePlayer = function (size) {
    return function (clockwise) {
        return function (player) {
            var rotatedCoords = Egg_Logic_Map.rotateOffset(clockwise)(player.coords);
            var rotated = Egg_Logic_Map.rotatePlayer(size)(clockwise)(player);
            var newCoords = Data_Semigroup.append(Egg_Types_Coord.semigroupCoord)(rotated.coords)(rotatedCoords);
            return {
                coords: newCoords,
                direction: rotated.direction,
                oldDirection: rotated.oldDirection,
                currentFrame: rotated.currentFrame,
                id: rotated.id,
                falling: rotated.falling,
                stop: rotated.stop,
                lastAction: rotated.lastAction,
                moved: rotated.moved,
                playerType: rotated.playerType
            };
        };
    };
};
var resizeBoard = function (canvas) {
    return function (old) {
        return function ($$new) {
            var v = Data_Eq.eq(Egg_Types_ScreenSize.eqScreenSize)(old.screenSize)($$new.screenSize);
            if (v) {
                return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
            };
            if (!v) {
                return Egg_Dom_Canvas.sizeCanvas(canvas.element)(Data_Int.toNumber(Egg_Types_ScreenSize.smallest($$new.screenSize)));
            };
            throw new Error("Failed pattern match at Egg.Dom.Renderer (line 93, column 3 - line 95, column 83): " + [ v.constructor.name ]);
        };
    };
};
var getPlayersForRender = function (v) {
    return function (v1) {
        return function (players) {
            if (v === 90) {
                return Data_Functor.map(Data_Functor.functorArray)(rotatePlayer(Egg_Logic_Board.boardSizeFromBoard(v1))(Egg_Types_Clockwise.AntiClockwise.value))(players);
            };
            if (v === 180) {
                return Data_Function.applyN(function (v2) {
                    return Data_Functor.map(Data_Functor.functorArray)(rotatePlayer(Egg_Logic_Board.boardSizeFromBoard(v1))(Egg_Types_Clockwise.AntiClockwise.value))(v2);
                })(2)(players);
            };
            if (v === 270) {
                return Data_Functor.map(Data_Functor.functorArray)(rotatePlayer(Egg_Logic_Board.boardSizeFromBoard(v1))(Egg_Types_Clockwise.Clockwise.value))(players);
            };
            return players;
        };
    };
};
var getBoardForRender = function (v) {
    return function (board) {
        if (v === 90) {
            return Egg_Logic_Map.rotateBoard(Egg_Types_Clockwise.AntiClockwise.value)(board);
        };
        if (v === 180) {
            return Data_Function.applyN(Egg_Logic_Map.rotateBoard(Egg_Types_Clockwise.AntiClockwise.value))(2)(board);
        };
        if (v === 270) {
            return Egg_Logic_Map.rotateBoard(Egg_Types_Clockwise.Clockwise.value)(board);
        };
        return board;
    };
};
var findImageSource = function (sourceMap) {
    return function (src) {
        return Data_Map_Internal.lookup(Egg_Types_ResourceUrl.ordResourceUrl)(src)(sourceMap);
    };
};
var renderPlayer = function (canvasData) {
    return function (angle) {
        return function (player) {
            var imageSource = findImageSource(canvasData.imageMap)(player.playerType.img);
            if (imageSource instanceof Data_Maybe.Just) {
                return Egg_Dom_Canvas.drawPlayer(canvasData.buffer.context)(imageSource.value0)(angle)(player.coords)(Egg_Types_CurrentFrame.getCurrentFrame(player.currentFrame));
            };
            if (imageSource instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Egg.Dom.Renderer (line 121, column 3 - line 123, column 26): " + [ imageSource.constructor.name ]);
        };
    };
};
var renderPlayers = function (canvasData) {
    return function (angle) {
        return function (board) {
            return function (players) {
                var allPlayers = Egg_Logic_RenderMap.addEdgePlayers(board)(players);
                return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](Data_Unit.unit))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(renderPlayer(canvasData)(angle))(allPlayers));
            };
        };
    };
};
var drawRenderItem = function (canvasData) {
    return function (item) {
        var imageSource = findImageSource(canvasData.imageMap)(item.value.img);
        if (imageSource instanceof Data_Maybe.Just) {
            return Egg_Dom_Canvas.drawTile(canvasData.buffer.context)(imageSource.value0)(toCoord(item));
        };
        if (imageSource instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
        };
        throw new Error("Failed pattern match at Egg.Dom.Renderer (line 136, column 7 - line 138, column 30): " + [ imageSource.constructor.name ]);
    };
};
var renderBoard = function (canvasData) {
    return function (renderMap) {
        return function (board) {
            var items = Data_Array.filter(Egg_Logic_RenderMap.shouldDrawItem(renderMap))(Matrix.toIndexedArray(board));
            return function __do() {
                var v = Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(drawRenderItem(canvasData))(items)();
                return Data_Unit.unit;
            };
        };
    };
};
var clearTiles = function (canvasData) {
    return function (renderMap) {
        var clearList = Egg_Logic_RenderMap.getRenderList(renderMap);
        return function __do() {
            var v = Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(function (coord) {
                return Egg_Dom_Canvas.clearTile(canvasData.buffer.context)(coord);
            })(clearList)();
            return Data_Unit.unit;
        };
    };
};
var calcRenderAngle = function (gs) {
    return Data_Semigroup.append(Egg_Types_RenderAngle.semigroupRenderAngle)(gs.renderAngle)(gs.rotateAngle);
};
var renderGameState = function (oldCanvasData) {
    return function (old) {
        return function ($$new) {
            var renderMap = getBoardForRender($$new.rotateAngle)(Egg_Logic_RenderMap.gameStatesToRenderMap(old)($$new));
            var canvasData = sizeCanvasData($$new)(oldCanvasData);
            return function __do() {
                resizeBoard(canvasData.screen)(old)($$new)();
                clearTiles(canvasData)(renderMap)();
                renderBoard(canvasData)(renderMap)(getBoardForRender($$new.rotateAngle)($$new.board))();
                renderPlayers(canvasData)($$new.rotateAngle)($$new.board)(getPlayersForRender($$new.rotateAngle)($$new.board)($$new.players))();
                return Egg_Dom_Canvas.copyBufferToCanvas(canvasData.buffer)(canvasData.screen)(calcRenderAngle($$new))();
            };
        };
    };
};
module.exports = {
    renderGameState: renderGameState,
    sizeCanvasData: sizeCanvasData,
    getPlayersForRender: getPlayersForRender,
    rotatePlayer: rotatePlayer,
    getBoardForRender: getBoardForRender,
    calcRenderAngle: calcRenderAngle,
    showRenderingTiles: showRenderingTiles,
    resizeBoard: resizeBoard,
    clearTiles: clearTiles,
    toCoord: toCoord,
    findImageSource: findImageSource,
    renderPlayers: renderPlayers,
    renderPlayer: renderPlayer,
    renderBoard: renderBoard,
    drawRenderItem: drawRenderItem
};
