// Generated by purs version 0.13.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Pink = (function () {
    function Pink() {

    };
    Pink.value = new Pink();
    return Pink;
})();
var Green = (function () {
    function Green() {

    };
    Green.value = new Green();
    return Green;
})();
var NoOp = (function () {
    function NoOp() {

    };
    NoOp.value = new NoOp();
    return NoOp;
})();
var Collectable = (function () {
    function Collectable(value0) {
        this.value0 = value0;
    };
    Collectable.create = function (value0) {
        return new Collectable(value0);
    };
    return Collectable;
})();
var CompleteLevel = (function () {
    function CompleteLevel() {

    };
    CompleteLevel.value = new CompleteLevel();
    return CompleteLevel;
})();
var Switch = (function () {
    function Switch(value0) {
        this.value0 = value0;
    };
    Switch.create = function (value0) {
        return new Switch(value0);
    };
    return Switch;
})();
var Teleport = (function () {
    function Teleport() {

    };
    Teleport.value = new Teleport();
    return Teleport;
})();
var SplitEggs = (function () {
    function SplitEggs() {

    };
    SplitEggs.value = new SplitEggs();
    return SplitEggs;
})();
var showTileAction = new Data_Show.Show(function (v) {
    if (v instanceof NoOp) {
        return "NoOp";
    };
    if (v instanceof Collectable) {
        return "Collectable " + Data_Show.show(Data_Show.showInt)(v.value0);
    };
    if (v instanceof CompleteLevel) {
        return "CompleteLevel";
    };
    if (v instanceof Switch && v.value0 instanceof Pink) {
        return "Pink Switch";
    };
    if (v instanceof Switch && v.value0 instanceof Green) {
        return "Green Switch";
    };
    if (v instanceof Teleport) {
        return "Teleport";
    };
    if (v instanceof SplitEggs) {
        return "SplitEggs";
    };
    throw new Error("Failed pattern match at Egg.Types.TileAction (line 26, column 1 - line 33, column 37): " + [ v.constructor.name ]);
});
var eqSwitchColour = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Pink && y instanceof Pink) {
            return true;
        };
        if (x instanceof Green && y instanceof Green) {
            return true;
        };
        return false;
    };
});
var eqTileAction = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof NoOp && y instanceof NoOp) {
            return true;
        };
        if (x instanceof Collectable && y instanceof Collectable) {
            return x.value0 === y.value0;
        };
        if (x instanceof CompleteLevel && y instanceof CompleteLevel) {
            return true;
        };
        if (x instanceof Switch && y instanceof Switch) {
            return Data_Eq.eq(eqSwitchColour)(x.value0)(y.value0);
        };
        if (x instanceof Teleport && y instanceof Teleport) {
            return true;
        };
        if (x instanceof SplitEggs && y instanceof SplitEggs) {
            return true;
        };
        return false;
    };
});
var ordSwitchColour = new Data_Ord.Ord(function () {
    return eqSwitchColour;
}, function (x) {
    return function (y) {
        if (x instanceof Pink && y instanceof Pink) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Pink) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Pink) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Green && y instanceof Green) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Egg.Types.TileAction (line 13, column 1 - line 13, column 52): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var ordTileAction = new Data_Ord.Ord(function () {
    return eqTileAction;
}, function (x) {
    return function (y) {
        if (x instanceof NoOp && y instanceof NoOp) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof NoOp) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof NoOp) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Collectable && y instanceof Collectable) {
            return Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
        };
        if (x instanceof Collectable) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Collectable) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof CompleteLevel && y instanceof CompleteLevel) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof CompleteLevel) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof CompleteLevel) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Switch && y instanceof Switch) {
            return Data_Ord.compare(ordSwitchColour)(x.value0)(y.value0);
        };
        if (x instanceof Switch) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Switch) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Teleport && y instanceof Teleport) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Teleport) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Teleport) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof SplitEggs && y instanceof SplitEggs) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Egg.Types.TileAction (line 24, column 1 - line 24, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    Pink: Pink,
    Green: Green,
    NoOp: NoOp,
    Collectable: Collectable,
    CompleteLevel: CompleteLevel,
    Switch: Switch,
    Teleport: Teleport,
    SplitEggs: SplitEggs,
    eqSwitchColour: eqSwitchColour,
    ordSwitchColour: ordSwitchColour,
    eqTileAction: eqTileAction,
    ordTileAction: ordTileAction,
    showTileAction: showTileAction
};
