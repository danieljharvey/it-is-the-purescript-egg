// Generated by purs version 0.13.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Egg_Types_ResourceUrl = require("../Egg.Types.ResourceUrl/index.js");
var Egg = (function () {
    function Egg() {

    };
    Egg.value = new Egg();
    return Egg;
})();
var RedEgg = (function () {
    function RedEgg() {

    };
    RedEgg.value = new RedEgg();
    return RedEgg;
})();
var BlueEgg = (function () {
    function BlueEgg() {

    };
    BlueEgg.value = new BlueEgg();
    return BlueEgg;
})();
var YellowEgg = (function () {
    function YellowEgg() {

    };
    YellowEgg.value = new YellowEgg();
    return YellowEgg;
})();
var RainbowEgg = (function () {
    function RainbowEgg() {

    };
    RainbowEgg.value = new RainbowEgg();
    return RainbowEgg;
})();
var SilverEgg = (function () {
    function SilverEgg() {

    };
    SilverEgg.value = new SilverEgg();
    return SilverEgg;
})();
var Blade = (function () {
    function Blade() {

    };
    Blade.value = new Blade();
    return Blade;
})();
var FindBlade = (function () {
    function FindBlade() {

    };
    FindBlade.value = new FindBlade();
    return FindBlade;
})();
var valueToPlayer = function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(Egg.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(RedEgg.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(BlueEgg.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(YellowEgg.value);
    };
    return Data_Maybe.Nothing.value;
};
var showPlayerKind = new Data_Show.Show(function (v) {
    if (v instanceof Egg) {
        return "Egg";
    };
    if (v instanceof RedEgg) {
        return "Red Egg";
    };
    if (v instanceof BlueEgg) {
        return "Blue Egg";
    };
    if (v instanceof YellowEgg) {
        return "Yellow Egg";
    };
    if (v instanceof RainbowEgg) {
        return "Rainbow Egg";
    };
    if (v instanceof SilverEgg) {
        return "Silver Egg";
    };
    if (v instanceof Blade) {
        return "Blade";
    };
    if (v instanceof FindBlade) {
        return "Find Blade";
    };
    throw new Error("Failed pattern match at Egg.Types.PlayerType (line 24, column 1 - line 32, column 32): " + [ v.constructor.name ]);
});
var playerValue = function (v) {
    if (v instanceof Egg) {
        return 1;
    };
    if (v instanceof RedEgg) {
        return 2;
    };
    if (v instanceof BlueEgg) {
        return 3;
    };
    if (v instanceof YellowEgg) {
        return 4;
    };
    return 0;
};
var eqPlayerKind = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Egg && y instanceof Egg) {
            return true;
        };
        if (x instanceof RedEgg && y instanceof RedEgg) {
            return true;
        };
        if (x instanceof BlueEgg && y instanceof BlueEgg) {
            return true;
        };
        if (x instanceof YellowEgg && y instanceof YellowEgg) {
            return true;
        };
        if (x instanceof RainbowEgg && y instanceof RainbowEgg) {
            return true;
        };
        if (x instanceof SilverEgg && y instanceof SilverEgg) {
            return true;
        };
        if (x instanceof Blade && y instanceof Blade) {
            return true;
        };
        if (x instanceof FindBlade && y instanceof FindBlade) {
            return true;
        };
        return false;
    };
});
var ordPlayerKind = new Data_Ord.Ord(function () {
    return eqPlayerKind;
}, function (x) {
    return function (y) {
        if (x instanceof Egg && y instanceof Egg) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Egg) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Egg) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof RedEgg && y instanceof RedEgg) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof RedEgg) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof RedEgg) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof BlueEgg && y instanceof BlueEgg) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof BlueEgg) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof BlueEgg) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof YellowEgg && y instanceof YellowEgg) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof YellowEgg) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof YellowEgg) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof RainbowEgg && y instanceof RainbowEgg) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof RainbowEgg) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof RainbowEgg) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof SilverEgg && y instanceof SilverEgg) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof SilverEgg) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof SilverEgg) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Blade && y instanceof Blade) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Blade) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Blade) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof FindBlade && y instanceof FindBlade) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Egg.Types.PlayerType (line 22, column 1 - line 22, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var defaultPlayerType = {
    frames: 18,
    img: new Egg_Types_ResourceUrl.SpriteResource("egg-sprite"),
    multiplier: 1,
    title: "The Egg",
    type_: Egg.value,
    fallSpeed: 1,
    moveSpeed: 1,
    flying: false,
    movePattern: "normal"
};
module.exports = {
    Egg: Egg,
    RedEgg: RedEgg,
    BlueEgg: BlueEgg,
    YellowEgg: YellowEgg,
    RainbowEgg: RainbowEgg,
    SilverEgg: SilverEgg,
    Blade: Blade,
    FindBlade: FindBlade,
    playerValue: playerValue,
    valueToPlayer: valueToPlayer,
    defaultPlayerType: defaultPlayerType,
    eqPlayerKind: eqPlayerKind,
    ordPlayerKind: ordPlayerKind,
    showPlayerKind: showPlayerKind
};
