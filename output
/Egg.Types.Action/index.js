// Generated by purs version 0.13.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Egg_Types_Clockwise = require("../Egg.Types.Clockwise/index.js");
var Paused = (function () {
    function Paused() {

    };
    Paused.value = new Paused();
    return Paused;
})();
var Playing = (function () {
    function Playing() {

    };
    Playing.value = new Playing();
    return Playing;
})();
var Turning = (function () {
    function Turning(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Turning.create = function (value0) {
        return function (value1) {
            return new Turning(value0, value1);
        };
    };
    return Turning;
})();
var Resize = (function () {
    function Resize(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Resize.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Resize(value0, value1, value2);
            };
        };
    };
    return Resize;
})();
var showAction = new Data_Show.Show(function (v) {
    if (v instanceof Playing) {
        return "Playing";
    };
    if (v instanceof Paused) {
        return "Paused";
    };
    if (v instanceof Turning) {
        return "Turning (" + (Data_Show.show(Egg_Types_Clockwise.showClockwise)(v.value0) + (") (" + (Data_Show.show(Data_Show.showInt)(v.value1) + ")")));
    };
    if (v instanceof Resize) {
        return "Resize (" + (Data_Show.show(Data_Show.showInt)(v.value0) + ("," + (Data_Show.show(Data_Show.showInt)(v.value1) + ("): " + Data_Show.show(showAction)(v.value2)))));
    };
    throw new Error("Failed pattern match at Egg.Types.Action (line 19, column 1 - line 23, column 81): " + [ v.constructor.name ]);
});
var eqAction = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Paused && y instanceof Paused) {
            return true;
        };
        if (x instanceof Playing && y instanceof Playing) {
            return true;
        };
        if (x instanceof Turning && y instanceof Turning) {
            return Data_Eq.eq(Egg_Types_Clockwise.eqClockwise)(x.value0)(y.value0) && x.value1 === y.value1;
        };
        if (x instanceof Resize && y instanceof Resize) {
            return x.value0 === y.value0 && x.value1 === y.value1 && Data_Eq.eq(eqAction)(x.value2)(y.value2);
        };
        return false;
    };
});
var ordAction = new Data_Ord.Ord(function () {
    return eqAction;
}, function (x) {
    return function (y) {
        if (x instanceof Paused && y instanceof Paused) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Paused) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Paused) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Playing && y instanceof Playing) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Playing) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Playing) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Turning && y instanceof Turning) {
            var v = Data_Ord.compare(Egg_Types_Clockwise.ordClockwise)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordInt)(x.value1)(y.value1);
        };
        if (x instanceof Turning) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Turning) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Resize && y instanceof Resize) {
            var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            var v1 = Data_Ord.compare(Data_Ord.ordInt)(x.value1)(y.value1);
            if (v1 instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v1 instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordAction)(x.value2)(y.value2);
        };
        throw new Error("Failed pattern match at Egg.Types.Action (line 17, column 1 - line 17, column 40): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    Paused: Paused,
    Playing: Playing,
    Turning: Turning,
    Resize: Resize,
    eqAction: eqAction,
    ordAction: ordAction,
    showAction: showAction
};
