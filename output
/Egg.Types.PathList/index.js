// Generated by purs version 0.13.5
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Egg_Types_SmallCoord = require("../Egg.Types.SmallCoord/index.js");
var PathList = function (x) {
    return x;
};
var singleton = function (coord) {
    return Data_Map_Internal.singleton(coord)(Data_Array_NonEmpty.singleton(coord));
};
var showPathList = Data_Map_Internal.showMap(Egg_Types_SmallCoord.showSmallCoord)(Data_Array_NonEmpty_Internal.showNonEmptyArray(Egg_Types_SmallCoord.showSmallCoord));
var semigroupPathList = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        var compareLengths = function (a$prime) {
            return function (b$prime) {
                var $9 = Data_Array_NonEmpty.length(b$prime) < Data_Array_NonEmpty.length(a$prime);
                if ($9) {
                    return b$prime;
                };
                return a$prime;
            };
        };
        return PathList(Data_Map_Internal.unionWith(Egg_Types_SmallCoord.ordSmallCoord)(compareLengths)(v)(v1));
    };
});
var ordPathList = Data_Map_Internal.ordMap(Egg_Types_SmallCoord.ordSmallCoord)(Data_Array_NonEmpty_Internal.ordNonEmptyArray(Egg_Types_SmallCoord.ordSmallCoord));
var monoidPathList = new Data_Monoid.Monoid(function () {
    return semigroupPathList;
}, PathList(Data_Monoid.mempty(Data_Map_Internal.monoidMap(Egg_Types_SmallCoord.ordSmallCoord))));
var lookup = function (coord) {
    return function (v) {
        return Data_Map_Internal.lookup(Egg_Types_SmallCoord.ordSmallCoord)(coord)(v);
    };
};
var listToItems = function (v) {
    return Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Map_Internal.values(v));
};
var listLength = function (v) {
    return Data_Foldable.length(Data_Map_Internal.foldableMap)(Data_Semiring.semiringInt)(v);
};
var itemToList = function (arr) {
    return Data_Map_Internal.singleton(Data_Array_NonEmpty.head(arr))(arr);
};
var isKey = function (coord) {
    return function (v) {
        return Data_Map_Internal.member(Egg_Types_SmallCoord.ordSmallCoord)(coord)(v);
    };
};
var getPreviouslyFound = function (v) {
    var lists = Data_Functor.map(Data_Functor.functorArray)(Data_Array_NonEmpty.toArray)(Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Map_Internal.values(v)));
    return Data_Array.nubEq(Egg_Types_SmallCoord.eqSmallCoord)(Data_Array.concat(lists));
};
var eqPathList = Data_Map_Internal.eqMap(Egg_Types_SmallCoord.eqSmallCoord)(Data_Array_NonEmpty_Internal.eqNonEmptyArray(Egg_Types_SmallCoord.eqSmallCoord));
module.exports = {
    PathList: PathList,
    itemToList: itemToList,
    listToItems: listToItems,
    listLength: listLength,
    isKey: isKey,
    lookup: lookup,
    getPreviouslyFound: getPreviouslyFound,
    singleton: singleton,
    eqPathList: eqPathList,
    ordPathList: ordPathList,
    showPathList: showPathList,
    semigroupPathList: semigroupPathList,
    monoidPathList: monoidPathList
};
