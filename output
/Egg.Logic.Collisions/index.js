// Generated by purs version 0.13.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Egg_Data_PlayerTypes = require("../Egg.Data.PlayerTypes/index.js");
var Egg_Types_Coord = require("../Egg.Types.Coord/index.js");
var Egg_Types_CurrentFrame = require("../Egg.Types.CurrentFrame/index.js");
var Egg_Types_LastAction = require("../Egg.Types.LastAction/index.js");
var Egg_Types_PlayerType = require("../Egg.Types.PlayerType/index.js");
var Egg_Types_ResourceUrl = require("../Egg.Types.ResourceUrl/index.js");
var zipWithIndex = function (as) {
    return Data_Array.zipWith(Data_Tuple.Tuple.create)(Data_Array.range(0)(Data_Array.length(as) - 1 | 0))(as);
};
var uniquePairs = function (dictEq) {
    return function (items) {
        return Control_Bind.bind(Control_Bind.bindArray)(zipWithIndex(items))(function (v) {
            return Control_Bind.bind(Control_Bind.bindArray)(zipWithIndex(items))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Bind.bindArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0 < v1.value0))(function () {
                    return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(v.value1, v1.value1));
                });
            });
        });
    };
};
var justSplit = function (player) {
    if (player.lastAction instanceof Data_Maybe.Just && player.lastAction.value0 instanceof Egg_Types_LastAction.Split) {
        return true;
    };
    return false;
};
var isCollidable = function (player) {
    if (player.playerType.type_ instanceof Egg_Types_PlayerType.SilverEgg) {
        return false;
    };
    return true;
};
var inPair = function (c) {
    return function (v) {
        return Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "stop";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "playerType";
        }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "type_";
        }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
            return "title";
        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
            return "multiplier";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "moveSpeed";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "movePattern";
        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
            return "img";
        }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
            return "frames";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "flying";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "fallSpeed";
        }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
            return "oldDirection";
        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
            return "moved";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "lastAction";
        }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
            return "id";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "falling";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "direction";
        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
            return "currentFrame";
        }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
            return "coords";
        }))(Egg_Types_Coord.eqCoord)))(c)(v.value0) || Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "stop";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "playerType";
        }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "type_";
        }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
            return "title";
        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
            return "multiplier";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "moveSpeed";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "movePattern";
        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
            return "img";
        }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
            return "frames";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "flying";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "fallSpeed";
        }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
            return "oldDirection";
        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
            return "moved";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "lastAction";
        }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
            return "id";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "falling";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "direction";
        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
            return "currentFrame";
        }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
            return "coords";
        }))(Egg_Types_Coord.eqCoord)))(c)(v.value1);
    };
};
var inPairs = function (pairs) {
    return function (player) {
        return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraBoolean))(false)(Data_Functor.map(Data_Functor.functorArray)(inPair(player))(pairs));
    };
};
var removeCollided = function (pairs) {
    return function (players) {
        return Data_Array.filter(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(inPairs(pairs)))(players);
    };
};
var getNewKinds = function (p1) {
    return function (p2) {
        return Egg_Types_PlayerType.valueToPlayer(Egg_Types_PlayerType.playerValue(p1) + Egg_Types_PlayerType.playerValue(p2) | 0);
    };
};
var combinePlayers = function (v) {
    var v1 = getNewKinds(v.value0.playerType.type_)(v.value1.playerType.type_);
    if (v1 instanceof Data_Maybe.Just) {
        return [ {
            coords: v.value0.coords,
            direction: v.value0.direction,
            oldDirection: v.value0.oldDirection,
            currentFrame: v.value0.currentFrame,
            id: v.value0.id,
            falling: v.value0.falling,
            stop: v.value0.stop,
            lastAction: v.value0.lastAction,
            moved: v.value0.moved,
            playerType: Egg_Data_PlayerTypes.getPlayerType(v1.value0)
        } ];
    };
    if (v1 instanceof Data_Maybe.Nothing) {
        return [ v.value0, v.value1 ];
    };
    throw new Error("Failed pattern match at Egg.Logic.Collisions (line 95, column 5 - line 97, column 26): " + [ v1.constructor.name ]);
};
var collisionDistance = 30;
var alwaysPositive = function (i) {
    var $26 = i < 0;
    if ($26) {
        return -i | 0;
    };
    return i;
};
var highestDistance = function (first) {
    return function (second) {
        var distance = Egg_Types_Coord.difference(first)(second);
        return Data_Ord.max(Data_Ord.ordInt)(alwaysPositive(Egg_Types_Coord.totalX(distance)))(alwaysPositive(Egg_Types_Coord.totalY(distance)));
    };
};
var checkCollision = function (player1) {
    return function (player2) {
        return Data_Eq.notEq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "stop";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "playerType";
        }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "type_";
        }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
            return "title";
        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
            return "multiplier";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "moveSpeed";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "movePattern";
        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
            return "img";
        }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
            return "frames";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "flying";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "fallSpeed";
        }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
            return "oldDirection";
        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
            return "moved";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "lastAction";
        }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
            return "id";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "falling";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "direction";
        }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
            return "currentFrame";
        }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
            return "coords";
        }))(Egg_Types_Coord.eqCoord)))(player1)(player2) && (highestDistance(player1.coords)(player2.coords) < collisionDistance && (isCollidable(player1) && (isCollidable(player2) && (!justSplit(player1) && !justSplit(player2)))));
    };
};
var collidedPairs = function (players) {
    return Data_Array.filter(function (v) {
        return checkCollision(v.value0)(v.value1);
    })(uniquePairs(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
        return "stop";
    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
        return "playerType";
    }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
        return "type_";
    }))(Egg_Types_PlayerType.eqPlayerKind))()(new Data_Symbol.IsSymbol(function () {
        return "title";
    }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
        return "multiplier";
    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
        return "moveSpeed";
    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
        return "movePattern";
    }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
        return "img";
    }))(Egg_Types_ResourceUrl.eqResourceUrl))()(new Data_Symbol.IsSymbol(function () {
        return "frames";
    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
        return "flying";
    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
        return "fallSpeed";
    }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
        return "oldDirection";
    }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
        return "moved";
    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
        return "lastAction";
    }))(Data_Maybe.eqMaybe(Egg_Types_LastAction.eqLastAction)))()(new Data_Symbol.IsSymbol(function () {
        return "id";
    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
        return "falling";
    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
        return "direction";
    }))(Egg_Types_Coord.eqCoord))()(new Data_Symbol.IsSymbol(function () {
        return "currentFrame";
    }))(Egg_Types_CurrentFrame.eqCurrentFrame))()(new Data_Symbol.IsSymbol(function () {
        return "coords";
    }))(Egg_Types_Coord.eqCoord)))(players));
};
var checkAllCollisions = function (players) {
    var pairs = collidedPairs(players);
    var remaining = removeCollided(pairs)(players);
    var newPlayers = Data_Array.concatMap(combinePlayers)(pairs);
    return Data_Semigroup.append(Data_Semigroup.semigroupArray)(remaining)(newPlayers);
};
module.exports = {
    collisionDistance: collisionDistance,
    checkAllCollisions: checkAllCollisions,
    collidedPairs: collidedPairs,
    alwaysPositive: alwaysPositive,
    checkCollision: checkCollision,
    justSplit: justSplit,
    isCollidable: isCollidable,
    highestDistance: highestDistance,
    zipWithIndex: zipWithIndex,
    uniquePairs: uniquePairs,
    removeCollided: removeCollided,
    inPairs: inPairs,
    inPair: inPair,
    combinePlayers: combinePlayers,
    getNewKinds: getNewKinds
};
