// Generated by purs version 0.13.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var UInt8 = (function () {
    function UInt8() {

    };
    UInt8.value = new UInt8();
    return UInt8;
})();
var UInt16LE = (function () {
    function UInt16LE() {

    };
    UInt16LE.value = new UInt16LE();
    return UInt16LE;
})();
var UInt16BE = (function () {
    function UInt16BE() {

    };
    UInt16BE.value = new UInt16BE();
    return UInt16BE;
})();
var UInt32LE = (function () {
    function UInt32LE() {

    };
    UInt32LE.value = new UInt32LE();
    return UInt32LE;
})();
var UInt32BE = (function () {
    function UInt32BE() {

    };
    UInt32BE.value = new UInt32BE();
    return UInt32BE;
})();
var Int8 = (function () {
    function Int8() {

    };
    Int8.value = new Int8();
    return Int8;
})();
var Int16LE = (function () {
    function Int16LE() {

    };
    Int16LE.value = new Int16LE();
    return Int16LE;
})();
var Int16BE = (function () {
    function Int16BE() {

    };
    Int16BE.value = new Int16BE();
    return Int16BE;
})();
var Int32LE = (function () {
    function Int32LE() {

    };
    Int32LE.value = new Int32LE();
    return Int32LE;
})();
var Int32BE = (function () {
    function Int32BE() {

    };
    Int32BE.value = new Int32BE();
    return Int32BE;
})();
var FloatLE = (function () {
    function FloatLE() {

    };
    FloatLE.value = new FloatLE();
    return FloatLE;
})();
var FloatBE = (function () {
    function FloatBE() {

    };
    FloatBE.value = new FloatBE();
    return FloatBE;
})();
var DoubleLE = (function () {
    function DoubleLE() {

    };
    DoubleLE.value = new DoubleLE();
    return DoubleLE;
})();
var DoubleBE = (function () {
    function DoubleBE() {

    };
    DoubleBE.value = new DoubleBE();
    return DoubleBE;
})();
var writeString = function ($2) {
    return $foreign.writeStringImpl(Node_Encoding.encodingToNode($2));
};
var toString = function ($3) {
    return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
};
var showBufferValueType = new Data_Show.Show(function (v) {
    if (v instanceof UInt8) {
        return "UInt8";
    };
    if (v instanceof UInt16LE) {
        return "UInt16LE";
    };
    if (v instanceof UInt16BE) {
        return "UInt16BE";
    };
    if (v instanceof UInt32LE) {
        return "UInt32LE";
    };
    if (v instanceof UInt32BE) {
        return "UInt32BE";
    };
    if (v instanceof Int8) {
        return "Int8";
    };
    if (v instanceof Int16LE) {
        return "Int16LE";
    };
    if (v instanceof Int16BE) {
        return "Int16BE";
    };
    if (v instanceof Int32LE) {
        return "Int32LE";
    };
    if (v instanceof Int32BE) {
        return "Int32BE";
    };
    if (v instanceof FloatLE) {
        return "FloatLE";
    };
    if (v instanceof FloatBE) {
        return "FloatBE";
    };
    if (v instanceof DoubleLE) {
        return "DoubleLE";
    };
    if (v instanceof DoubleBE) {
        return "DoubleBE";
    };
    throw new Error("Failed pattern match at Node.Buffer (line 65, column 1 - line 79, column 29): " + [ v.constructor.name ]);
});
var write = (function () {
    var $4 = Data_Show.show(showBufferValueType);
    return function ($5) {
        return $foreign.writeImpl($4($5));
    };
})();
var showBuffer = new Data_Show.Show($foreign.showImpl);
var readString = function ($6) {
    return $foreign.readStringImpl(Node_Encoding.encodingToNode($6));
};
var read = (function () {
    var $7 = Data_Show.show(showBufferValueType);
    return function ($8) {
        return $foreign.readImpl($7($8));
    };
})();
var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromString = function (str) {
    var $9 = $foreign.fromStringImpl(str);
    return function ($10) {
        return $9(Node_Encoding.encodingToNode($10));
    };
};
module.exports = {
    UInt8: UInt8,
    UInt16LE: UInt16LE,
    UInt16BE: UInt16BE,
    UInt32LE: UInt32LE,
    UInt32BE: UInt32BE,
    Int8: Int8,
    Int16LE: Int16LE,
    Int16BE: Int16BE,
    Int32LE: Int32LE,
    Int32BE: Int32BE,
    FloatLE: FloatLE,
    FloatBE: FloatBE,
    DoubleLE: DoubleLE,
    DoubleBE: DoubleBE,
    fromString: fromString,
    read: read,
    readString: readString,
    toString: toString,
    write: write,
    writeString: writeString,
    getAtOffset: getAtOffset,
    showBuffer: showBuffer,
    showBufferValueType: showBufferValueType,
    create: $foreign.create,
    fromArray: $foreign.fromArray,
    fromArrayBuffer: $foreign.fromArrayBuffer,
    toArrayBuffer: $foreign.toArrayBuffer,
    toArray: $foreign.toArray,
    setAtOffset: $foreign.setAtOffset,
    size: $foreign.size,
    concat: $foreign.concat,
    "concat'": $foreign["concat'"],
    copy: $foreign.copy,
    fill: $foreign.fill
};
