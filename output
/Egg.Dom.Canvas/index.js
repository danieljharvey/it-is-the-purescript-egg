// Generated by purs version 0.13.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Parallel = require("../Control.Parallel/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Egg_Dom_Gradient = require("../Egg.Dom.Gradient/index.js");
var Egg_Logic_Board = require("../Egg.Logic.Board/index.js");
var Egg_Types_Coord = require("../Egg.Types.Coord/index.js");
var Egg_Types_RenderAngle = require("../Egg.Types.RenderAngle/index.js");
var Egg_Types_ResourceUrl = require("../Egg.Types.ResourceUrl/index.js");
var Graphics_Canvas = require("../Graphics.Canvas/index.js");
var CanvasDomId = function (x) {
    return x;
};
var withTranslate = function (trans) {
    return function (dest) {
        return function (callback) {
            return function __do() {
                var v = Graphics_Canvas.translate(dest)(trans)();
                callback();
                return Graphics_Canvas.translate(dest)(Egg_Logic_Board.invertTranslation(trans))();
            };
        };
    };
};
var withGradient = function (size) {
    return function (context) {
        return function (callback) {
            return function __do() {
                var v = Egg_Dom_Gradient.getGradient(size)(context)();
                var v1 = Graphics_Canvas.setGradientFillStyle(context)(v)();
                callback();
                return Graphics_Canvas.setFillStyle(context)("black")();
            };
        };
    };
};
var withGlobalAlpha = function (alpha) {
    return function (context) {
        return function (callback) {
            return function __do() {
                var v = Graphics_Canvas.setGlobalAlpha(context)(alpha)();
                callback();
                return Graphics_Canvas.setGlobalAlpha(context)(1.0)();
            };
        };
    };
};
var withComposite = function (composite) {
    return function (context) {
        return function (callback) {
            return function __do() {
                var v = Graphics_Canvas.setGlobalCompositeOperation(context)(composite)();
                callback();
                return Graphics_Canvas.setGlobalCompositeOperation(context)(Graphics_Canvas.SourceOver.value)();
            };
        };
    };
};
var tileSize = 64;
var sizeCanvas = function (element) {
    return function (x) {
        return function __do() {
            var v = Graphics_Canvas.setCanvasWidth(element)(x)();
            var v1 = Graphics_Canvas.setCanvasHeight(element)(x)();
            return Data_Unit.unit;
        };
    };
};
var rotate$prime = function (dest) {
    return function (angle) {
        var v = Egg_Types_RenderAngle.toRadians(angle);
        return Graphics_Canvas.rotate(dest)(v);
    };
};
var withRotate = function (angle) {
    return function (dest) {
        return function (callback) {
            return function __do() {
                var v = rotate$prime(dest)(angle)();
                callback();
                return rotate$prime(dest)(Egg_Types_RenderAngle.invertAngle(angle))();
            };
        };
    };
};
var orError = function (msg) {
    return function (a) {
        return Data_Either.note(Effect_Exception.error(msg))(a);
    };
};
var tidyImageReturn = function (resourceUrl) {
    return function (maybeImage) {
        return Data_Functor.map(Data_Either.functorEither)(function (img) {
            return new Data_Tuple.Tuple(resourceUrl, img);
        })(orError("Could not load file: " + Data_Show.show(Egg_Types_ResourceUrl.showResourceUrl)(resourceUrl))(maybeImage));
    };
};
var tryLoadImageAff = function (resourceUrl) {
    var tryLoadImageCallback = function (successFn) {
        return function (maybeImg) {
            return successFn(tidyImageReturn(resourceUrl)(maybeImg));
        };
    };
    var affCallback = function (successFn) {
        return function __do() {
            Graphics_Canvas.tryLoadImage(Data_Show.show(Egg_Types_ResourceUrl.showResourceUrl)(resourceUrl))(tryLoadImageCallback(successFn))();
            return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
        };
    };
    return Effect_Aff.makeAff(affCallback);
};
var loadImages = function (dictFoldable) {
    return function (dictTraversable) {
        return function (resourceUrls) {
            return Data_Functor.map(Effect_Aff.functorAff)(Data_Map_Internal.fromFoldable(Egg_Types_ResourceUrl.ordResourceUrl)(dictFoldable))(Control_Parallel.parTraverse(Effect_Aff.parallelAff)(dictTraversable)(tryLoadImageAff)(resourceUrls));
        };
    };
};
var getCanvas = function (v) {
    var affCallback = function (successFn) {
        return function __do() {
            var v1 = Graphics_Canvas.getCanvasElementById(v)();
            var eitherCanvasOrError = orError("Could not find canvas #" + v)(v1);
            successFn(eitherCanvasOrError)();
            return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
        };
    };
    return Effect_Aff.makeAff(affCallback);
};
var fillTile = function (context) {
    return function (v) {
        var rect = {
            x: Data_Int.toNumber((v.x * tileSize | 0) + 5 | 0),
            y: Data_Int.toNumber((v.y * tileSize | 0) + 5 | 0),
            width: Data_Int.toNumber(tileSize - 10 | 0),
            height: Data_Int.toNumber(tileSize - 10 | 0)
        };
        return function __do() {
            Graphics_Canvas.setFillStyle(context)("rgba(255,0,0,0.5)")();
            return Graphics_Canvas.fillRect(context)(rect)();
        };
    };
};
var drawWithOffset = function (element) {
    return function (dest) {
        return function (screenSize) {
            var source = Graphics_Canvas.canvasElementToImageSource(element);
            var size = Data_Int.toNumber(screenSize);
            var offset = -1.0 * Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(screenSize)(2));
            return Graphics_Canvas.drawImageScale(dest)(source)(offset)(offset)(size)(size);
        };
    };
};
var drawTile = function (context) {
    return function (image) {
        return function (coord) {
            var y = Data_Int.toNumber(Egg_Types_Coord.totalY(coord));
            var x = Data_Int.toNumber(Egg_Types_Coord.totalX(coord));
            return Graphics_Canvas.drawImage(context)(image)(x)(y);
        };
    };
};
var drawPlayer = function (context) {
    return function (image) {
        return function (angle) {
            return function (coord) {
                return function (frame) {
                    var tileSize$prime = Data_Int.toNumber(tileSize);
                    var sx = Data_Int.toNumber(frame * tileSize | 0);
                    var destY = -1.0 * Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(tileSize)(2));
                    var destX = -1.0 * Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(tileSize)(2));
                    return withTranslate(Egg_Logic_Board.createTileTranslation(coord))(context)(withRotate(Egg_Types_RenderAngle.invertAngle(angle))(context)(Graphics_Canvas.drawImageFull(context)(image)(sx)(0.0)(tileSize$prime)(tileSize$prime)(destX)(destY)(tileSize$prime)(tileSize$prime)));
                };
            };
        };
    };
};
var darkenScreen = function (alpha) {
    return function (context) {
        return function (size) {
            return Graphics_Canvas.fillRect(context)({
                x: 0.0,
                y: 0.0,
                width: Data_Int.toNumber(size.width * tileSize | 0),
                height: Data_Int.toNumber(size.height * tileSize | 0)
            });
        };
    };
};
var copyBufferToCanvas = function (buffer) {
    return function (screen) {
        return function (angle) {
            return function __do() {
                withGradient(screen.size)(screen.context)(darkenScreen(0.4)(screen.context)(Egg_Logic_Board.createBoardSize(screen.size)))();
                return withTranslate(Egg_Logic_Board.createCenteredTranslation(screen.size))(screen.context)(withRotate(angle)(screen.context)(drawWithOffset(buffer.element)(screen.context)(screen.size)))();
            };
        };
    };
};
var clearTile = function (context) {
    return function (v) {
        var rect = {
            x: Data_Int.toNumber(v.x * tileSize | 0),
            y: Data_Int.toNumber(v.y * tileSize | 0),
            width: Data_Int.toNumber(tileSize),
            height: Data_Int.toNumber(tileSize)
        };
        return Graphics_Canvas.clearRect(context)(rect);
    };
};
var clearScreen = function (context) {
    return function (size) {
        return Graphics_Canvas.clearRect(context)({
            x: 0.0,
            y: 0.0,
            width: Data_Int.toNumber(size.width * tileSize | 0),
            height: Data_Int.toNumber(size.height * tileSize | 0)
        });
    };
};
var canvasSize = 480;
var bufferSize = 640;
var setupCanvas = function (gameResources) {
    return Control_Bind.bind(Effect_Aff.bindAff)(getCanvas("buffer-canvas"))(function (v) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.getContext2D(v)))(function (v1) {
            return Control_Bind.bind(Effect_Aff.bindAff)(getCanvas("canvas"))(function (v2) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Graphics_Canvas.getContext2D(v2)))(function (v3) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(loadImages(Data_List_Types.foldableList)(Data_List_Types.traversableList)(gameResources))(function (v4) {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                            screen: {
                                element: v2,
                                context: v3,
                                size: canvasSize
                            },
                            buffer: {
                                element: v,
                                context: v1,
                                size: bufferSize
                            },
                            imageMap: v4
                        });
                    });
                });
            });
        });
    });
};
module.exports = {
    tileSize: tileSize,
    bufferSize: bufferSize,
    canvasSize: canvasSize,
    CanvasDomId: CanvasDomId,
    setupCanvas: setupCanvas,
    getCanvas: getCanvas,
    sizeCanvas: sizeCanvas,
    loadImages: loadImages,
    tryLoadImageAff: tryLoadImageAff,
    tidyImageReturn: tidyImageReturn,
    orError: orError,
    clearScreen: clearScreen,
    darkenScreen: darkenScreen,
    copyBufferToCanvas: copyBufferToCanvas,
    drawWithOffset: drawWithOffset,
    withGradient: withGradient,
    withComposite: withComposite,
    withGlobalAlpha: withGlobalAlpha,
    withTranslate: withTranslate,
    withRotate: withRotate,
    "rotate'": rotate$prime,
    drawTile: drawTile,
    fillTile: fillTile,
    clearTile: clearTile,
    drawPlayer: drawPlayer
};
