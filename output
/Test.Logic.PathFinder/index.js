// Generated by purs version 0.13.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Egg_Logic_PathFinder = require("../Egg.Logic.PathFinder/index.js");
var Egg_Types_Coord = require("../Egg.Types.Coord/index.js");
var Egg_Types_PathList = require("../Egg.Types.PathList/index.js");
var Egg_Types_PathMap = require("../Egg.Types.PathMap/index.js");
var Egg_Types_SmallCoord = require("../Egg.Types.SmallCoord/index.js");
var Test_Spec = require("../Test.Spec/index.js");
var Test_Spec_Assertions = require("../Test.Spec.Assertions/index.js");
var tests = Test_Spec.describe(Data_Identity.monadIdentity)("PathFinder")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("overflow")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Is fine within range")(Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Logic_PathFinder.overflow(10)(0))(0)))(function () {
    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Goes under fine within range")(Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Logic_PathFinder.overflow(10)(-1 | 0))(9)))(function () {
        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Goes under multiple times fine within range")(Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Logic_PathFinder.overflow(10)(-11 | 0))(9)))(function () {
            return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Goes back over")(Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Logic_PathFinder.overflow(10)(11))(1));
        });
    });
})))(function () {
    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("wrapValue")(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Wraps height and width under")((function () {
        var size = {
            width: 2,
            height: 2
        };
        var coord = new Egg_Types_SmallCoord.SmallCoord(-1 | 0, 4);
        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Egg_Types_SmallCoord.showSmallCoord)(Egg_Types_SmallCoord.eqSmallCoord)(Egg_Logic_PathFinder.wrapCoord(size)(coord))(new Egg_Types_SmallCoord.SmallCoord(1, 0));
    })())))(function () {
        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("iteratePathList")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Does one round")((function () {
            var pathMap = Egg_Types_PathMap.createEmpty(3);
            var initial = Egg_Types_PathList.singleton(new Egg_Types_SmallCoord.SmallCoord(1, 1));
            var newList = Egg_Logic_PathFinder.iteratePathList(pathMap)(initial);
            return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Types_PathList.listLength(newList))(4);
        })()))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Items are limited by number of squares")((function () {
                var pathMap = Egg_Types_PathMap.createEmpty(3);
                var initial = Egg_Types_PathList.singleton(new Egg_Types_SmallCoord.SmallCoord(1, 1));
                var newList = Egg_Logic_PathFinder.iteratePathList(pathMap)(Egg_Logic_PathFinder.iteratePathList(pathMap)(initial));
                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Types_PathList.listLength(newList))(4);
            })()))(function () {
                return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Items are limited by number of squares")((function () {
                    var pathMap = Egg_Types_PathMap.createEmpty(5);
                    var initial = Egg_Types_PathList.singleton(new Egg_Types_SmallCoord.SmallCoord(1, 1));
                    var newList = Egg_Logic_PathFinder.iteratePathList(pathMap)(Egg_Logic_PathFinder.iteratePathList(pathMap)(initial));
                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showInt)(Data_Eq.eqInt)(Egg_Types_PathList.listLength(newList))(6);
                })());
            });
        })))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.describe(Data_Identity.monadIdentity)("seekUntil")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Does not finds because limit")((function () {
                var pathMap = Egg_Types_PathMap.createEmpty(20);
                var initial = Egg_Types_PathList.singleton(new Egg_Types_SmallCoord.SmallCoord(10, 10));
                var seek = new Egg_Types_SmallCoord.SmallCoord(0, 0);
                return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Maybe.showMaybe(Data_Array_NonEmpty_Internal.showNonEmptyArray(Egg_Types_SmallCoord.showSmallCoord)))(Data_Maybe.eqMaybe(Data_Array_NonEmpty_Internal.eqNonEmptyArray(Egg_Types_SmallCoord.eqSmallCoord)))(Egg_Logic_PathFinder.seekUntil(pathMap)(seek)(2)(initial))(Data_Maybe.Nothing.value);
            })()))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Does find because small board")((function () {
                    var pathMap = Egg_Types_PathMap.createEmpty(10);
                    var initial = Egg_Types_PathList.singleton(new Egg_Types_SmallCoord.SmallCoord(5, 5));
                    var seek = new Egg_Types_SmallCoord.SmallCoord(0, 0);
                    return Test_Spec_Assertions.shouldSatisfy(Effect_Aff.monadThrowAff)(Data_Maybe.showMaybe(Data_Array_NonEmpty_Internal.showNonEmptyArray(Egg_Types_SmallCoord.showSmallCoord)))(Egg_Logic_PathFinder.seekUntil(pathMap)(seek)(10)(initial))(Data_Maybe.isJust);
                })()))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Finds in big board")((function () {
                        var pathMap = Egg_Types_PathMap.createEmpty(20);
                        var initial = Egg_Types_PathList.singleton(new Egg_Types_SmallCoord.SmallCoord(10, 10));
                        var seek = new Egg_Types_SmallCoord.SmallCoord(0, 0);
                        return Test_Spec_Assertions.shouldSatisfy(Effect_Aff.monadThrowAff)(Data_Maybe.showMaybe(Data_Array_NonEmpty_Internal.showNonEmptyArray(Egg_Types_SmallCoord.showSmallCoord)))(Egg_Logic_PathFinder.seekUntil(pathMap)(seek)(20)(initial))(Data_Maybe.isJust);
                    })()))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Finds across border")((function () {
                            var pathMap = Egg_Types_PathMap.createEmpty(3);
                            var initial = Egg_Types_PathList.singleton(new Egg_Types_SmallCoord.SmallCoord(0, 0));
                            var seek = new Egg_Types_SmallCoord.SmallCoord(2, 2);
                            return Test_Spec_Assertions.shouldSatisfy(Effect_Aff.monadThrowAff)(Data_Maybe.showMaybe(Data_Array_NonEmpty_Internal.showNonEmptyArray(Egg_Types_SmallCoord.showSmallCoord)))(Egg_Logic_PathFinder.seekUntil(pathMap)(seek)(5)(initial))(Data_Maybe.isJust);
                        })()))(function () {
                            return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Finds across border other way")((function () {
                                var pathMap = Egg_Types_PathMap.createEmpty(3);
                                var initial = Egg_Types_PathList.singleton(new Egg_Types_SmallCoord.SmallCoord(2, 2));
                                var seek = new Egg_Types_SmallCoord.SmallCoord(0, 0);
                                return Test_Spec_Assertions.shouldSatisfy(Effect_Aff.monadThrowAff)(Data_Maybe.showMaybe(Data_Array_NonEmpty_Internal.showNonEmptyArray(Egg_Types_SmallCoord.showSmallCoord)))(Egg_Logic_PathFinder.seekUntil(pathMap)(seek)(5)(initial))(Data_Maybe.isJust);
                            })());
                        });
                    });
                });
            })))(function () {
                return Test_Spec.describe(Data_Identity.monadIdentity)("chooseDirection")(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("Does something sensible")((function () {
                    var pathMap = Egg_Types_PathMap.createEmpty(8);
                    var coords = [ Egg_Types_Coord.createCoord(2)(0), Egg_Types_Coord.createCoord(7)(7) ];
                    var current = Egg_Types_Coord.createCoord(2)(2);
                    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Maybe.showMaybe(Egg_Types_Coord.showCoord))(Data_Maybe.eqMaybe(Egg_Types_Coord.eqCoord))(Egg_Logic_PathFinder.chooseDirection(pathMap)(coords)(current))(new Data_Maybe.Just(Egg_Types_Coord.createCoord(0)(-1 | 0)));
                })()));
            });
        });
    });
}));
module.exports = {
    tests: tests
};
